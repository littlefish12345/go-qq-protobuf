// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.1
// source: message/messageBody.proto

package go_qq_protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodePage       *int32  `protobuf:"zigzag32,1,opt,name=CodePage,proto3,oneof" json:"CodePage,omitempty"`
	Time           *uint32 `protobuf:"varint,2,opt,name=Time,proto3,oneof" json:"Time,omitempty"`
	Random         *uint32 `protobuf:"varint,3,opt,name=Random,proto3,oneof" json:"Random,omitempty"`
	Color          *uint32 `protobuf:"varint,4,opt,name=Color,proto3,oneof" json:"Color,omitempty"`
	Size           *uint32 `protobuf:"varint,5,opt,name=Size,proto3,oneof" json:"Size,omitempty"`
	Effect         *uint32 `protobuf:"varint,6,opt,name=Effect,proto3,oneof" json:"Effect,omitempty"`
	CharSet        *uint32 `protobuf:"varint,7,opt,name=CharSet,proto3,oneof" json:"CharSet,omitempty"`
	PitchAndFamily *uint32 `protobuf:"varint,8,opt,name=PitchAndFamily,proto3,oneof" json:"PitchAndFamily,omitempty"`
	FontName       *string `protobuf:"bytes,9,opt,name=FontName,proto3,oneof" json:"FontName,omitempty"`
	ReserveData    []byte  `protobuf:"bytes,10,opt,name=ReserveData,proto3,oneof" json:"ReserveData,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{0}
}

func (x *Attribute) GetCodePage() int32 {
	if x != nil && x.CodePage != nil {
		return *x.CodePage
	}
	return 0
}

func (x *Attribute) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *Attribute) GetRandom() uint32 {
	if x != nil && x.Random != nil {
		return *x.Random
	}
	return 0
}

func (x *Attribute) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *Attribute) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *Attribute) GetEffect() uint32 {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return 0
}

func (x *Attribute) GetCharSet() uint32 {
	if x != nil && x.CharSet != nil {
		return *x.CharSet
	}
	return 0
}

func (x *Attribute) GetPitchAndFamily() uint32 {
	if x != nil && x.PitchAndFamily != nil {
		return *x.PitchAndFamily
	}
	return 0
}

func (x *Attribute) GetFontName() string {
	if x != nil && x.FontName != nil {
		return *x.FontName
	}
	return ""
}

func (x *Attribute) GetReserveData() []byte {
	if x != nil {
		return x.ReserveData
	}
	return nil
}

type PlainText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_          *string `protobuf:"bytes,1,opt,name=String,proto3,oneof" json:"String,omitempty"`
	Link             *string `protobuf:"bytes,2,opt,name=Link,proto3,oneof" json:"Link,omitempty"`
	Attribute6Buffer []byte  `protobuf:"bytes,3,opt,name=Attribute6Buffer,proto3,oneof" json:"Attribute6Buffer,omitempty"`
	Attribute7Buffer []byte  `protobuf:"bytes,4,opt,name=Attribute7Buffer,proto3,oneof" json:"Attribute7Buffer,omitempty"`
	Buffer           []byte  `protobuf:"bytes,11,opt,name=Buffer,proto3,oneof" json:"Buffer,omitempty"`
	PbReserve        []byte  `protobuf:"bytes,12,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *PlainText) Reset() {
	*x = PlainText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlainText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlainText) ProtoMessage() {}

func (x *PlainText) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlainText.ProtoReflect.Descriptor instead.
func (*PlainText) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{1}
}

func (x *PlainText) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *PlainText) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *PlainText) GetAttribute6Buffer() []byte {
	if x != nil {
		return x.Attribute6Buffer
	}
	return nil
}

func (x *PlainText) GetAttribute7Buffer() []byte {
	if x != nil {
		return x.Attribute7Buffer
	}
	return nil
}

func (x *PlainText) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *PlainText) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type Face struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  *uint32 `protobuf:"varint,1,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
	Old    []byte  `protobuf:"bytes,2,opt,name=Old,proto3,oneof" json:"Old,omitempty"`
	Buffer []byte  `protobuf:"bytes,11,opt,name=Buffer,proto3,oneof" json:"Buffer,omitempty"`
}

func (x *Face) Reset() {
	*x = Face{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Face) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Face) ProtoMessage() {}

func (x *Face) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Face.ProtoReflect.Descriptor instead.
func (*Face) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{2}
}

func (x *Face) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Face) GetOld() []byte {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *Face) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type OnlineImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid               []byte `protobuf:"bytes,1,opt,name=Guid,proto3,oneof" json:"Guid,omitempty"`
	FilePath           []byte `protobuf:"bytes,2,opt,name=FilePath,proto3,oneof" json:"FilePath,omitempty"`
	OldVersionSendFile []byte `protobuf:"bytes,3,opt,name=OldVersionSendFile,proto3,oneof" json:"OldVersionSendFile,omitempty"`
}

func (x *OnlineImage) Reset() {
	*x = OnlineImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineImage) ProtoMessage() {}

func (x *OnlineImage) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineImage.ProtoReflect.Descriptor instead.
func (*OnlineImage) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{3}
}

func (x *OnlineImage) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *OnlineImage) GetFilePath() []byte {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *OnlineImage) GetOldVersionSendFile() []byte {
	if x != nil {
		return x.OldVersionSendFile
	}
	return nil
}

type NotOnlineImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath           *string `protobuf:"bytes,1,opt,name=FilePath,proto3,oneof" json:"FilePath,omitempty"`
	FileLength         *uint32 `protobuf:"varint,2,opt,name=FileLength,proto3,oneof" json:"FileLength,omitempty"`
	DownloadPath       *string `protobuf:"bytes,3,opt,name=DownloadPath,proto3,oneof" json:"DownloadPath,omitempty"`
	OldVersionSendFile []byte  `protobuf:"bytes,4,opt,name=OldVersionSendFile,proto3,oneof" json:"OldVersionSendFile,omitempty"`
	ImageType          *uint32 `protobuf:"varint,5,opt,name=ImageType,proto3,oneof" json:"ImageType,omitempty"`
	PreviewImage       []byte  `protobuf:"bytes,6,opt,name=PreviewImage,proto3,oneof" json:"PreviewImage,omitempty"`
	PictureMd5         []byte  `protobuf:"bytes,7,opt,name=PictureMd5,proto3,oneof" json:"PictureMd5,omitempty"`
	PictureHeight      *uint32 `protobuf:"varint,8,opt,name=PictureHeight,proto3,oneof" json:"PictureHeight,omitempty"`
	PictureWidth       *uint32 `protobuf:"varint,9,opt,name=PictureWidth,proto3,oneof" json:"PictureWidth,omitempty"`
	ResId              *string `protobuf:"bytes,10,opt,name=ResId,proto3,oneof" json:"ResId,omitempty"`
	Flag               []byte  `protobuf:"bytes,11,opt,name=Flag,proto3,oneof" json:"Flag,omitempty"`
	ThumbUrl           *string `protobuf:"bytes,12,opt,name=ThumbUrl,proto3,oneof" json:"ThumbUrl,omitempty"`
	Original           *uint32 `protobuf:"varint,13,opt,name=Original,proto3,oneof" json:"Original,omitempty"`
	BigUrl             *string `protobuf:"bytes,14,opt,name=BigUrl,proto3,oneof" json:"BigUrl,omitempty"`
	OriginalUrl        *string `protobuf:"bytes,15,opt,name=OriginalUrl,proto3,oneof" json:"OriginalUrl,omitempty"`
	BizType            *uint32 `protobuf:"varint,16,opt,name=BizType,proto3,oneof" json:"BizType,omitempty"`
	Result             *uint32 `protobuf:"varint,17,opt,name=Result,proto3,oneof" json:"Result,omitempty"`
	Index              *uint32 `protobuf:"varint,18,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
	OpFaceBuffer       []byte  `protobuf:"bytes,19,opt,name=OpFaceBuffer,proto3,oneof" json:"OpFaceBuffer,omitempty"`
	OldPictureMd5      *bool   `protobuf:"varint,20,opt,name=OldPictureMd5,proto3,oneof" json:"OldPictureMd5,omitempty"`
	ThumbWidth         *uint32 `protobuf:"varint,21,opt,name=ThumbWidth,proto3,oneof" json:"ThumbWidth,omitempty"`
	ThumbHeight        *uint32 `protobuf:"varint,22,opt,name=ThumbHeight,proto3,oneof" json:"ThumbHeight,omitempty"`
	FileId             *uint32 `protobuf:"varint,23,opt,name=FileId,proto3,oneof" json:"FileId,omitempty"`
	ShowLen            *uint32 `protobuf:"varint,24,opt,name=ShowLen,proto3,oneof" json:"ShowLen,omitempty"`
	DownloadLen        *uint32 `protobuf:"varint,25,opt,name=DownloadLen,proto3,oneof" json:"DownloadLen,omitempty"`
	PbReserve          []byte  `protobuf:"bytes,29,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *NotOnlineImage) Reset() {
	*x = NotOnlineImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotOnlineImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotOnlineImage) ProtoMessage() {}

func (x *NotOnlineImage) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotOnlineImage.ProtoReflect.Descriptor instead.
func (*NotOnlineImage) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{4}
}

func (x *NotOnlineImage) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

func (x *NotOnlineImage) GetFileLength() uint32 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *NotOnlineImage) GetDownloadPath() string {
	if x != nil && x.DownloadPath != nil {
		return *x.DownloadPath
	}
	return ""
}

func (x *NotOnlineImage) GetOldVersionSendFile() []byte {
	if x != nil {
		return x.OldVersionSendFile
	}
	return nil
}

func (x *NotOnlineImage) GetImageType() uint32 {
	if x != nil && x.ImageType != nil {
		return *x.ImageType
	}
	return 0
}

func (x *NotOnlineImage) GetPreviewImage() []byte {
	if x != nil {
		return x.PreviewImage
	}
	return nil
}

func (x *NotOnlineImage) GetPictureMd5() []byte {
	if x != nil {
		return x.PictureMd5
	}
	return nil
}

func (x *NotOnlineImage) GetPictureHeight() uint32 {
	if x != nil && x.PictureHeight != nil {
		return *x.PictureHeight
	}
	return 0
}

func (x *NotOnlineImage) GetPictureWidth() uint32 {
	if x != nil && x.PictureWidth != nil {
		return *x.PictureWidth
	}
	return 0
}

func (x *NotOnlineImage) GetResId() string {
	if x != nil && x.ResId != nil {
		return *x.ResId
	}
	return ""
}

func (x *NotOnlineImage) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *NotOnlineImage) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

func (x *NotOnlineImage) GetOriginal() uint32 {
	if x != nil && x.Original != nil {
		return *x.Original
	}
	return 0
}

func (x *NotOnlineImage) GetBigUrl() string {
	if x != nil && x.BigUrl != nil {
		return *x.BigUrl
	}
	return ""
}

func (x *NotOnlineImage) GetOriginalUrl() string {
	if x != nil && x.OriginalUrl != nil {
		return *x.OriginalUrl
	}
	return ""
}

func (x *NotOnlineImage) GetBizType() uint32 {
	if x != nil && x.BizType != nil {
		return *x.BizType
	}
	return 0
}

func (x *NotOnlineImage) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *NotOnlineImage) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *NotOnlineImage) GetOpFaceBuffer() []byte {
	if x != nil {
		return x.OpFaceBuffer
	}
	return nil
}

func (x *NotOnlineImage) GetOldPictureMd5() bool {
	if x != nil && x.OldPictureMd5 != nil {
		return *x.OldPictureMd5
	}
	return false
}

func (x *NotOnlineImage) GetThumbWidth() uint32 {
	if x != nil && x.ThumbWidth != nil {
		return *x.ThumbWidth
	}
	return 0
}

func (x *NotOnlineImage) GetThumbHeight() uint32 {
	if x != nil && x.ThumbHeight != nil {
		return *x.ThumbHeight
	}
	return 0
}

func (x *NotOnlineImage) GetFileId() uint32 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *NotOnlineImage) GetShowLen() uint32 {
	if x != nil && x.ShowLen != nil {
		return *x.ShowLen
	}
	return 0
}

func (x *NotOnlineImage) GetDownloadLen() uint32 {
	if x != nil && x.DownloadLen != nil {
		return *x.DownloadLen
	}
	return 0
}

func (x *NotOnlineImage) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type TransElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElemType  *uint32 `protobuf:"varint,1,opt,name=ElemType,proto3,oneof" json:"ElemType,omitempty"`
	ElemValue []byte  `protobuf:"bytes,2,opt,name=ElemValue,proto3,oneof" json:"ElemValue,omitempty"`
}

func (x *TransElem) Reset() {
	*x = TransElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransElem) ProtoMessage() {}

func (x *TransElem) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransElem.ProtoReflect.Descriptor instead.
func (*TransElem) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{5}
}

func (x *TransElem) GetElemType() uint32 {
	if x != nil && x.ElemType != nil {
		return *x.ElemType
	}
	return 0
}

func (x *TransElem) GetElemValue() []byte {
	if x != nil {
		return x.ElemValue
	}
	return nil
}

type MarketFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceName    []byte  `protobuf:"bytes,1,opt,name=FaceName,proto3,oneof" json:"FaceName,omitempty"`
	ItemType    *uint32 `protobuf:"varint,2,opt,name=ItemType,proto3,oneof" json:"ItemType,omitempty"`
	FaceInfo    *uint32 `protobuf:"varint,3,opt,name=FaceInfo,proto3,oneof" json:"FaceInfo,omitempty"`
	FaceId      []byte  `protobuf:"bytes,4,opt,name=FaceId,proto3,oneof" json:"FaceId,omitempty"`
	TabId       *uint32 `protobuf:"varint,5,opt,name=TabId,proto3,oneof" json:"TabId,omitempty"`
	SubType     *uint32 `protobuf:"varint,6,opt,name=SubType,proto3,oneof" json:"SubType,omitempty"`
	Key         []byte  `protobuf:"bytes,7,opt,name=Key,proto3,oneof" json:"Key,omitempty"`
	Param       []byte  `protobuf:"bytes,8,opt,name=Param,proto3,oneof" json:"Param,omitempty"`
	MediaType   *uint32 `protobuf:"varint,9,opt,name=MediaType,proto3,oneof" json:"MediaType,omitempty"`
	ImageWidth  *uint32 `protobuf:"varint,10,opt,name=ImageWidth,proto3,oneof" json:"ImageWidth,omitempty"`
	ImageHeight *uint32 `protobuf:"varint,11,opt,name=ImageHeight,proto3,oneof" json:"ImageHeight,omitempty"`
	MobileParam []byte  `protobuf:"bytes,12,opt,name=MobileParam,proto3,oneof" json:"MobileParam,omitempty"`
	PbReserve   []byte  `protobuf:"bytes,13,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *MarketFace) Reset() {
	*x = MarketFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketFace) ProtoMessage() {}

func (x *MarketFace) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketFace.ProtoReflect.Descriptor instead.
func (*MarketFace) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{6}
}

func (x *MarketFace) GetFaceName() []byte {
	if x != nil {
		return x.FaceName
	}
	return nil
}

func (x *MarketFace) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *MarketFace) GetFaceInfo() uint32 {
	if x != nil && x.FaceInfo != nil {
		return *x.FaceInfo
	}
	return 0
}

func (x *MarketFace) GetFaceId() []byte {
	if x != nil {
		return x.FaceId
	}
	return nil
}

func (x *MarketFace) GetTabId() uint32 {
	if x != nil && x.TabId != nil {
		return *x.TabId
	}
	return 0
}

func (x *MarketFace) GetSubType() uint32 {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return 0
}

func (x *MarketFace) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MarketFace) GetParam() []byte {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *MarketFace) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *MarketFace) GetImageWidth() uint32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *MarketFace) GetImageHeight() uint32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *MarketFace) GetMobileParam() []byte {
	if x != nil {
		return x.MobileParam
	}
	return nil
}

func (x *MarketFace) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type CustomFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        []byte  `protobuf:"bytes,1,opt,name=Guid,proto3,oneof" json:"Guid,omitempty"`
	FilePath    *string `protobuf:"bytes,2,opt,name=FilePath,proto3,oneof" json:"FilePath,omitempty"`
	Shortcut    *string `protobuf:"bytes,3,opt,name=Shortcut,proto3,oneof" json:"Shortcut,omitempty"`
	Buffer      []byte  `protobuf:"bytes,4,opt,name=Buffer,proto3,oneof" json:"Buffer,omitempty"`
	Flag        []byte  `protobuf:"bytes,5,opt,name=Flag,proto3,oneof" json:"Flag,omitempty"`
	OldData     []byte  `protobuf:"bytes,6,opt,name=OldData,proto3,oneof" json:"OldData,omitempty"`
	FileId      *int32  `protobuf:"varint,7,opt,name=FileId,proto3,oneof" json:"FileId,omitempty"`
	ServerIp    *int32  `protobuf:"varint,8,opt,name=ServerIp,proto3,oneof" json:"ServerIp,omitempty"`
	ServerPort  *int32  `protobuf:"varint,9,opt,name=ServerPort,proto3,oneof" json:"ServerPort,omitempty"`
	FileType    *int32  `protobuf:"varint,10,opt,name=FileType,proto3,oneof" json:"FileType,omitempty"`
	Signature   []byte  `protobuf:"bytes,11,opt,name=Signature,proto3,oneof" json:"Signature,omitempty"`
	Useful      *int32  `protobuf:"varint,12,opt,name=Useful,proto3,oneof" json:"Useful,omitempty"`
	Md5         []byte  `protobuf:"bytes,13,opt,name=Md5,proto3,oneof" json:"Md5,omitempty"`
	ThumbUrl    *string `protobuf:"bytes,14,opt,name=ThumbUrl,proto3,oneof" json:"ThumbUrl,omitempty"`
	BigUrl      *string `protobuf:"bytes,15,opt,name=BigUrl,proto3,oneof" json:"BigUrl,omitempty"`
	OriginalUrl *string `protobuf:"bytes,16,opt,name=OriginalUrl,proto3,oneof" json:"OriginalUrl,omitempty"`
	BizType     *int32  `protobuf:"varint,17,opt,name=BizType,proto3,oneof" json:"BizType,omitempty"`
	RepeatIndex *int32  `protobuf:"varint,18,opt,name=RepeatIndex,proto3,oneof" json:"RepeatIndex,omitempty"`
	RepeatImage *int32  `protobuf:"varint,19,opt,name=RepeatImage,proto3,oneof" json:"RepeatImage,omitempty"`
	ImageType   *int32  `protobuf:"varint,20,opt,name=ImageType,proto3,oneof" json:"ImageType,omitempty"`
	Index       *int32  `protobuf:"varint,21,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
	Width       *int32  `protobuf:"varint,22,opt,name=Width,proto3,oneof" json:"Width,omitempty"`
	Height      *int32  `protobuf:"varint,23,opt,name=Height,proto3,oneof" json:"Height,omitempty"`
	Source      *int32  `protobuf:"varint,24,opt,name=Source,proto3,oneof" json:"Source,omitempty"`
	Size        *int32  `protobuf:"varint,25,opt,name=Size,proto3,oneof" json:"Size,omitempty"`
	Origin      *int32  `protobuf:"varint,26,opt,name=Origin,proto3,oneof" json:"Origin,omitempty"`
	ThumbWidth  *int32  `protobuf:"varint,27,opt,name=ThumbWidth,proto3,oneof" json:"ThumbWidth,omitempty"`
	ThumbHeight *int32  `protobuf:"varint,28,opt,name=ThumbHeight,proto3,oneof" json:"ThumbHeight,omitempty"`
	ShowLen     *int32  `protobuf:"varint,29,opt,name=ShowLen,proto3,oneof" json:"ShowLen,omitempty"`
	DownloadLen *int32  `protobuf:"varint,30,opt,name=DownloadLen,proto3,oneof" json:"DownloadLen,omitempty"`
	X400Url     *string `protobuf:"bytes,31,opt,name=_400Url,json=400Url,proto3,oneof" json:"_400Url,omitempty"`
	X400Width   *int32  `protobuf:"varint,32,opt,name=_400Width,json=400Width,proto3,oneof" json:"_400Width,omitempty"`
	X400Height  *int32  `protobuf:"varint,33,opt,name=_400Height,json=400Height,proto3,oneof" json:"_400Height,omitempty"`
	PbReserve   []byte  `protobuf:"bytes,34,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *CustomFace) Reset() {
	*x = CustomFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFace) ProtoMessage() {}

func (x *CustomFace) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFace.ProtoReflect.Descriptor instead.
func (*CustomFace) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{7}
}

func (x *CustomFace) GetGuid() []byte {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *CustomFace) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

func (x *CustomFace) GetShortcut() string {
	if x != nil && x.Shortcut != nil {
		return *x.Shortcut
	}
	return ""
}

func (x *CustomFace) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *CustomFace) GetFlag() []byte {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *CustomFace) GetOldData() []byte {
	if x != nil {
		return x.OldData
	}
	return nil
}

func (x *CustomFace) GetFileId() int32 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *CustomFace) GetServerIp() int32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CustomFace) GetServerPort() int32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CustomFace) GetFileType() int32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *CustomFace) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CustomFace) GetUseful() int32 {
	if x != nil && x.Useful != nil {
		return *x.Useful
	}
	return 0
}

func (x *CustomFace) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *CustomFace) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

func (x *CustomFace) GetBigUrl() string {
	if x != nil && x.BigUrl != nil {
		return *x.BigUrl
	}
	return ""
}

func (x *CustomFace) GetOriginalUrl() string {
	if x != nil && x.OriginalUrl != nil {
		return *x.OriginalUrl
	}
	return ""
}

func (x *CustomFace) GetBizType() int32 {
	if x != nil && x.BizType != nil {
		return *x.BizType
	}
	return 0
}

func (x *CustomFace) GetRepeatIndex() int32 {
	if x != nil && x.RepeatIndex != nil {
		return *x.RepeatIndex
	}
	return 0
}

func (x *CustomFace) GetRepeatImage() int32 {
	if x != nil && x.RepeatImage != nil {
		return *x.RepeatImage
	}
	return 0
}

func (x *CustomFace) GetImageType() int32 {
	if x != nil && x.ImageType != nil {
		return *x.ImageType
	}
	return 0
}

func (x *CustomFace) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CustomFace) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CustomFace) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CustomFace) GetSource() int32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *CustomFace) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *CustomFace) GetOrigin() int32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

func (x *CustomFace) GetThumbWidth() int32 {
	if x != nil && x.ThumbWidth != nil {
		return *x.ThumbWidth
	}
	return 0
}

func (x *CustomFace) GetThumbHeight() int32 {
	if x != nil && x.ThumbHeight != nil {
		return *x.ThumbHeight
	}
	return 0
}

func (x *CustomFace) GetShowLen() int32 {
	if x != nil && x.ShowLen != nil {
		return *x.ShowLen
	}
	return 0
}

func (x *CustomFace) GetDownloadLen() int32 {
	if x != nil && x.DownloadLen != nil {
		return *x.DownloadLen
	}
	return 0
}

func (x *CustomFace) GetX400Url() string {
	if x != nil && x.X400Url != nil {
		return *x.X400Url
	}
	return ""
}

func (x *CustomFace) GetX400Width() int32 {
	if x != nil && x.X400Width != nil {
		return *x.X400Width
	}
	return 0
}

func (x *CustomFace) GetX400Height() int32 {
	if x != nil && x.X400Height != nil {
		return *x.X400Height
	}
	return 0
}

func (x *CustomFace) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type Inst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  *uint32 `protobuf:"varint,1,opt,name=AppId,proto3,oneof" json:"AppId,omitempty"`
	InstId *uint32 `protobuf:"varint,2,opt,name=InstId,proto3,oneof" json:"InstId,omitempty"`
}

func (x *Inst) Reset() {
	*x = Inst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inst) ProtoMessage() {}

func (x *Inst) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inst.ProtoReflect.Descriptor instead.
func (*Inst) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{8}
}

func (x *Inst) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *Inst) GetInstId() uint32 {
	if x != nil && x.InstId != nil {
		return *x.InstId
	}
	return 0
}

type PcSupportDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PcPtlBegin     *uint32  `protobuf:"varint,1,opt,name=PcPtlBegin,proto3,oneof" json:"PcPtlBegin,omitempty"`
	PcPtlEnd       *uint32  `protobuf:"varint,2,opt,name=PcPtlEnd,proto3,oneof" json:"PcPtlEnd,omitempty"`
	MacPtlBegin    *uint32  `protobuf:"varint,3,opt,name=MacPtlBegin,proto3,oneof" json:"MacPtlBegin,omitempty"`
	MacPtlEnd      *uint32  `protobuf:"varint,4,opt,name=MacPtlEnd,proto3,oneof" json:"MacPtlEnd,omitempty"`
	PtlsSupport    []uint32 `protobuf:"varint,5,rep,packed,name=PtlsSupport,proto3" json:"PtlsSupport,omitempty"`
	PtlsNotSupport []uint32 `protobuf:"varint,6,rep,packed,name=PtlsNotSupport,proto3" json:"PtlsNotSupport,omitempty"`
}

func (x *PcSupportDef) Reset() {
	*x = PcSupportDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcSupportDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcSupportDef) ProtoMessage() {}

func (x *PcSupportDef) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcSupportDef.ProtoReflect.Descriptor instead.
func (*PcSupportDef) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{9}
}

func (x *PcSupportDef) GetPcPtlBegin() uint32 {
	if x != nil && x.PcPtlBegin != nil {
		return *x.PcPtlBegin
	}
	return 0
}

func (x *PcSupportDef) GetPcPtlEnd() uint32 {
	if x != nil && x.PcPtlEnd != nil {
		return *x.PcPtlEnd
	}
	return 0
}

func (x *PcSupportDef) GetMacPtlBegin() uint32 {
	if x != nil && x.MacPtlBegin != nil {
		return *x.MacPtlBegin
	}
	return 0
}

func (x *PcSupportDef) GetMacPtlEnd() uint32 {
	if x != nil && x.MacPtlEnd != nil {
		return *x.MacPtlEnd
	}
	return 0
}

func (x *PcSupportDef) GetPtlsSupport() []uint32 {
	if x != nil {
		return x.PtlsSupport
	}
	return nil
}

func (x *PcSupportDef) GetPtlsNotSupport() []uint32 {
	if x != nil {
		return x.PtlsNotSupport
	}
	return nil
}

type ElemFlags2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorTextId      *uint32       `protobuf:"varint,1,opt,name=ColorTextId,proto3,oneof" json:"ColorTextId,omitempty"`
	MessageId        *uint64       `protobuf:"varint,2,opt,name=MessageId,proto3,oneof" json:"MessageId,omitempty"`
	WhisperSessionId *uint32       `protobuf:"varint,3,opt,name=WhisperSessionId,proto3,oneof" json:"WhisperSessionId,omitempty"`
	PttChangeBit     *uint32       `protobuf:"varint,4,opt,name=PttChangeBit,proto3,oneof" json:"PttChangeBit,omitempty"`
	VipStatus        *uint32       `protobuf:"varint,5,opt,name=VipStatus,proto3,oneof" json:"VipStatus,omitempty"`
	CompatibleId     *uint32       `protobuf:"varint,6,opt,name=CompatibleId,proto3,oneof" json:"CompatibleId,omitempty"`
	Inst             []*Inst       `protobuf:"bytes,7,rep,name=Inst,proto3" json:"Inst,omitempty"`
	MessageRptCnt    *uint32       `protobuf:"varint,8,opt,name=MessageRptCnt,proto3,oneof" json:"MessageRptCnt,omitempty"`
	SrcInst          *Inst         `protobuf:"bytes,9,opt,name=SrcInst,proto3,oneof" json:"SrcInst,omitempty"`
	Longitude        *uint32       `protobuf:"varint,10,opt,name=Longitude,proto3,oneof" json:"Longitude,omitempty"`
	Latitude         *uint32       `protobuf:"varint,11,opt,name=Latitude,proto3,oneof" json:"Latitude,omitempty"`
	CustomFont       *uint32       `protobuf:"varint,12,opt,name=CustomFont,proto3,oneof" json:"CustomFont,omitempty"`
	PcSupportDef     *PcSupportDef `protobuf:"bytes,13,opt,name=PcSupportDef,proto3,oneof" json:"PcSupportDef,omitempty"`
	CrmFlags         *uint32       `protobuf:"varint,14,opt,name=CrmFlags,proto3,oneof" json:"CrmFlags,omitempty"`
}

func (x *ElemFlags2) Reset() {
	*x = ElemFlags2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElemFlags2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElemFlags2) ProtoMessage() {}

func (x *ElemFlags2) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElemFlags2.ProtoReflect.Descriptor instead.
func (*ElemFlags2) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{10}
}

func (x *ElemFlags2) GetColorTextId() uint32 {
	if x != nil && x.ColorTextId != nil {
		return *x.ColorTextId
	}
	return 0
}

func (x *ElemFlags2) GetMessageId() uint64 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return 0
}

func (x *ElemFlags2) GetWhisperSessionId() uint32 {
	if x != nil && x.WhisperSessionId != nil {
		return *x.WhisperSessionId
	}
	return 0
}

func (x *ElemFlags2) GetPttChangeBit() uint32 {
	if x != nil && x.PttChangeBit != nil {
		return *x.PttChangeBit
	}
	return 0
}

func (x *ElemFlags2) GetVipStatus() uint32 {
	if x != nil && x.VipStatus != nil {
		return *x.VipStatus
	}
	return 0
}

func (x *ElemFlags2) GetCompatibleId() uint32 {
	if x != nil && x.CompatibleId != nil {
		return *x.CompatibleId
	}
	return 0
}

func (x *ElemFlags2) GetInst() []*Inst {
	if x != nil {
		return x.Inst
	}
	return nil
}

func (x *ElemFlags2) GetMessageRptCnt() uint32 {
	if x != nil && x.MessageRptCnt != nil {
		return *x.MessageRptCnt
	}
	return 0
}

func (x *ElemFlags2) GetSrcInst() *Inst {
	if x != nil {
		return x.SrcInst
	}
	return nil
}

func (x *ElemFlags2) GetLongitude() uint32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *ElemFlags2) GetLatitude() uint32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *ElemFlags2) GetCustomFont() uint32 {
	if x != nil && x.CustomFont != nil {
		return *x.CustomFont
	}
	return 0
}

func (x *ElemFlags2) GetPcSupportDef() *PcSupportDef {
	if x != nil {
		return x.PcSupportDef
	}
	return nil
}

func (x *ElemFlags2) GetCrmFlags() uint32 {
	if x != nil && x.CrmFlags != nil {
		return *x.CrmFlags
	}
	return 0
}

type RichMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template1    []byte  `protobuf:"bytes,1,opt,name=Template1,proto3,oneof" json:"Template1,omitempty"`
	ServiceId    *uint32 `protobuf:"varint,2,opt,name=ServiceId,proto3,oneof" json:"ServiceId,omitempty"`
	MessageResId []byte  `protobuf:"bytes,3,opt,name=MessageResId,proto3,oneof" json:"MessageResId,omitempty"`
	Rand         *uint32 `protobuf:"varint,4,opt,name=Rand,proto3,oneof" json:"Rand,omitempty"`
	Seqence      *uint32 `protobuf:"varint,5,opt,name=Seqence,proto3,oneof" json:"Seqence,omitempty"`
}

func (x *RichMessage) Reset() {
	*x = RichMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichMessage) ProtoMessage() {}

func (x *RichMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichMessage.ProtoReflect.Descriptor instead.
func (*RichMessage) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{11}
}

func (x *RichMessage) GetTemplate1() []byte {
	if x != nil {
		return x.Template1
	}
	return nil
}

func (x *RichMessage) GetServiceId() uint32 {
	if x != nil && x.ServiceId != nil {
		return *x.ServiceId
	}
	return 0
}

func (x *RichMessage) GetMessageResId() []byte {
	if x != nil {
		return x.MessageResId
	}
	return nil
}

func (x *RichMessage) GetRand() uint32 {
	if x != nil && x.Rand != nil {
		return *x.Rand
	}
	return 0
}

func (x *RichMessage) GetSeqence() uint32 {
	if x != nil && x.Seqence != nil {
		return *x.Seqence
	}
	return 0
}

type GroupFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilenName       []byte  `protobuf:"bytes,1,opt,name=FilenName,proto3,oneof" json:"FilenName,omitempty"`
	FileSize        *int64  `protobuf:"varint,2,opt,name=FileSize,proto3,oneof" json:"FileSize,omitempty"`
	FileId          []byte  `protobuf:"bytes,3,opt,name=FileId,proto3,oneof" json:"FileId,omitempty"`
	BatchId         []byte  `protobuf:"bytes,4,opt,name=BatchId,proto3,oneof" json:"BatchId,omitempty"`
	FileKey         []byte  `protobuf:"bytes,5,opt,name=FileKey,proto3,oneof" json:"FileKey,omitempty"`
	Mark            []byte  `protobuf:"bytes,6,opt,name=Mark,proto3,oneof" json:"Mark,omitempty"`
	Sequence        *int64  `protobuf:"varint,7,opt,name=Sequence,proto3,oneof" json:"Sequence,omitempty"`
	BatchItemId     []byte  `protobuf:"bytes,8,opt,name=BatchItemId,proto3,oneof" json:"BatchItemId,omitempty"`
	FeedMessageTime *uint32 `protobuf:"varint,9,opt,name=FeedMessageTime,proto3,oneof" json:"FeedMessageTime,omitempty"`
	PbReserve       []byte  `protobuf:"bytes,10,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *GroupFile) Reset() {
	*x = GroupFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupFile) ProtoMessage() {}

func (x *GroupFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupFile.ProtoReflect.Descriptor instead.
func (*GroupFile) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{12}
}

func (x *GroupFile) GetFilenName() []byte {
	if x != nil {
		return x.FilenName
	}
	return nil
}

func (x *GroupFile) GetFileSize() int64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *GroupFile) GetFileId() []byte {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *GroupFile) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *GroupFile) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *GroupFile) GetMark() []byte {
	if x != nil {
		return x.Mark
	}
	return nil
}

func (x *GroupFile) GetSequence() int64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *GroupFile) GetBatchItemId() []byte {
	if x != nil {
		return x.BatchItemId
	}
	return nil
}

func (x *GroupFile) GetFeedMessageTime() uint32 {
	if x != nil && x.FeedMessageTime != nil {
		return *x.FeedMessageTime
	}
	return 0
}

func (x *GroupFile) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type ExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname         []byte  `protobuf:"bytes,1,opt,name=Nickname,proto3,oneof" json:"Nickname,omitempty"`
	GroupCard        []byte  `protobuf:"bytes,2,opt,name=GroupCard,proto3,oneof" json:"GroupCard,omitempty"`
	Level            *uint32 `protobuf:"varint,3,opt,name=Level,proto3,oneof" json:"Level,omitempty"`
	Flags            *uint32 `protobuf:"varint,4,opt,name=Flags,proto3,oneof" json:"Flags,omitempty"`
	GroupMask        *uint32 `protobuf:"varint,5,opt,name=GroupMask,proto3,oneof" json:"GroupMask,omitempty"`
	MessageTailId    *uint32 `protobuf:"varint,6,opt,name=MessageTailId,proto3,oneof" json:"MessageTailId,omitempty"`
	SenderTitle      []byte  `protobuf:"bytes,7,opt,name=SenderTitle,proto3,oneof" json:"SenderTitle,omitempty"`
	ApnsTips         []byte  `protobuf:"bytes,8,opt,name=ApnsTips,proto3,oneof" json:"ApnsTips,omitempty"`
	Uin              *int64  `protobuf:"varint,9,opt,name=Uin,proto3,oneof" json:"Uin,omitempty"`
	MessageStateFlag *int32  `protobuf:"varint,10,opt,name=MessageStateFlag,proto3,oneof" json:"MessageStateFlag,omitempty"`
	ApnsSoundType    *uint32 `protobuf:"varint,11,opt,name=ApnsSoundType,proto3,oneof" json:"ApnsSoundType,omitempty"`
	NewGroupFlag     *uint32 `protobuf:"varint,12,opt,name=NewGroupFlag,proto3,oneof" json:"NewGroupFlag,omitempty"`
}

func (x *ExtraInfo) Reset() {
	*x = ExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraInfo) ProtoMessage() {}

func (x *ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraInfo.ProtoReflect.Descriptor instead.
func (*ExtraInfo) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{13}
}

func (x *ExtraInfo) GetNickname() []byte {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *ExtraInfo) GetGroupCard() []byte {
	if x != nil {
		return x.GroupCard
	}
	return nil
}

func (x *ExtraInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ExtraInfo) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *ExtraInfo) GetGroupMask() uint32 {
	if x != nil && x.GroupMask != nil {
		return *x.GroupMask
	}
	return 0
}

func (x *ExtraInfo) GetMessageTailId() uint32 {
	if x != nil && x.MessageTailId != nil {
		return *x.MessageTailId
	}
	return 0
}

func (x *ExtraInfo) GetSenderTitle() []byte {
	if x != nil {
		return x.SenderTitle
	}
	return nil
}

func (x *ExtraInfo) GetApnsTips() []byte {
	if x != nil {
		return x.ApnsTips
	}
	return nil
}

func (x *ExtraInfo) GetUin() int64 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *ExtraInfo) GetMessageStateFlag() int32 {
	if x != nil && x.MessageStateFlag != nil {
		return *x.MessageStateFlag
	}
	return 0
}

func (x *ExtraInfo) GetApnsSoundType() uint32 {
	if x != nil && x.ApnsSoundType != nil {
		return *x.ApnsSoundType
	}
	return 0
}

func (x *ExtraInfo) GetNewGroupFlag() uint32 {
	if x != nil && x.NewGroupFlag != nil {
		return *x.NewGroupFlag
	}
	return 0
}

type VideoFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUuid           []byte   `protobuf:"bytes,1,opt,name=FileUuid,proto3,oneof" json:"FileUuid,omitempty"`
	FileMd5            []byte   `protobuf:"bytes,2,opt,name=FileMd5,proto3,oneof" json:"FileMd5,omitempty"`
	FileName           []byte   `protobuf:"bytes,3,opt,name=FileName,proto3,oneof" json:"FileName,omitempty"`
	FileFormat         *uint32  `protobuf:"varint,4,opt,name=FileFormat,proto3,oneof" json:"FileFormat,omitempty"`
	FileTime           *uint32  `protobuf:"varint,5,opt,name=FileTime,proto3,oneof" json:"FileTime,omitempty"`
	FileSize           *uint32  `protobuf:"varint,6,opt,name=FileSize,proto3,oneof" json:"FileSize,omitempty"`
	ThumbWidth         *uint32  `protobuf:"varint,7,opt,name=ThumbWidth,proto3,oneof" json:"ThumbWidth,omitempty"`
	ThumbHeight        *uint32  `protobuf:"varint,8,opt,name=ThumbHeight,proto3,oneof" json:"ThumbHeight,omitempty"`
	ThumbFileMd5       []byte   `protobuf:"bytes,9,opt,name=ThumbFileMd5,proto3,oneof" json:"ThumbFileMd5,omitempty"`
	Source             []byte   `protobuf:"bytes,10,opt,name=Source,proto3,oneof" json:"Source,omitempty"`
	ThumbFileSize      *uint32  `protobuf:"varint,11,opt,name=ThumbFileSize,proto3,oneof" json:"ThumbFileSize,omitempty"`
	BusiType           *uint32  `protobuf:"varint,12,opt,name=BusiType,proto3,oneof" json:"BusiType,omitempty"`
	FromChatType       *uint32  `protobuf:"varint,13,opt,name=FromChatType,proto3,oneof" json:"FromChatType,omitempty"`
	ToChatType         *uint32  `protobuf:"varint,14,opt,name=ToChatType,proto3,oneof" json:"ToChatType,omitempty"`
	SupportProgressive *bool    `protobuf:"varint,15,opt,name=SupportProgressive,proto3,oneof" json:"SupportProgressive,omitempty"`
	FileWidth          *uint32  `protobuf:"varint,16,opt,name=FileWidth,proto3,oneof" json:"FileWidth,omitempty"`
	FileHeight         *uint32  `protobuf:"varint,17,opt,name=FileHeight,proto3,oneof" json:"FileHeight,omitempty"`
	SubBusiType        *uint32  `protobuf:"varint,18,opt,name=SubBusiType,proto3,oneof" json:"SubBusiType,omitempty"`
	VideoAttrbute      *uint32  `protobuf:"varint,19,opt,name=VideoAttrbute,proto3,oneof" json:"VideoAttrbute,omitempty"`
	BytesThumbFileUrls [][]byte `protobuf:"bytes,20,rep,name=BytesThumbFileUrls,proto3" json:"BytesThumbFileUrls,omitempty"`
	BytesVideoFileUrls [][]byte `protobuf:"bytes,21,rep,name=BytesVideoFileUrls,proto3" json:"BytesVideoFileUrls,omitempty"`
	ThumbDownloadFlag  *uint32  `protobuf:"varint,22,opt,name=ThumbDownloadFlag,proto3,oneof" json:"ThumbDownloadFlag,omitempty"`
	VideoDownloadFlag  *uint32  `protobuf:"varint,23,opt,name=VideoDownloadFlag,proto3,oneof" json:"VideoDownloadFlag,omitempty"`
	PbReserve          []byte   `protobuf:"bytes,24,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *VideoFile) Reset() {
	*x = VideoFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFile) ProtoMessage() {}

func (x *VideoFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFile.ProtoReflect.Descriptor instead.
func (*VideoFile) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{14}
}

func (x *VideoFile) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *VideoFile) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *VideoFile) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *VideoFile) GetFileFormat() uint32 {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return 0
}

func (x *VideoFile) GetFileTime() uint32 {
	if x != nil && x.FileTime != nil {
		return *x.FileTime
	}
	return 0
}

func (x *VideoFile) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *VideoFile) GetThumbWidth() uint32 {
	if x != nil && x.ThumbWidth != nil {
		return *x.ThumbWidth
	}
	return 0
}

func (x *VideoFile) GetThumbHeight() uint32 {
	if x != nil && x.ThumbHeight != nil {
		return *x.ThumbHeight
	}
	return 0
}

func (x *VideoFile) GetThumbFileMd5() []byte {
	if x != nil {
		return x.ThumbFileMd5
	}
	return nil
}

func (x *VideoFile) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *VideoFile) GetThumbFileSize() uint32 {
	if x != nil && x.ThumbFileSize != nil {
		return *x.ThumbFileSize
	}
	return 0
}

func (x *VideoFile) GetBusiType() uint32 {
	if x != nil && x.BusiType != nil {
		return *x.BusiType
	}
	return 0
}

func (x *VideoFile) GetFromChatType() uint32 {
	if x != nil && x.FromChatType != nil {
		return *x.FromChatType
	}
	return 0
}

func (x *VideoFile) GetToChatType() uint32 {
	if x != nil && x.ToChatType != nil {
		return *x.ToChatType
	}
	return 0
}

func (x *VideoFile) GetSupportProgressive() bool {
	if x != nil && x.SupportProgressive != nil {
		return *x.SupportProgressive
	}
	return false
}

func (x *VideoFile) GetFileWidth() uint32 {
	if x != nil && x.FileWidth != nil {
		return *x.FileWidth
	}
	return 0
}

func (x *VideoFile) GetFileHeight() uint32 {
	if x != nil && x.FileHeight != nil {
		return *x.FileHeight
	}
	return 0
}

func (x *VideoFile) GetSubBusiType() uint32 {
	if x != nil && x.SubBusiType != nil {
		return *x.SubBusiType
	}
	return 0
}

func (x *VideoFile) GetVideoAttrbute() uint32 {
	if x != nil && x.VideoAttrbute != nil {
		return *x.VideoAttrbute
	}
	return 0
}

func (x *VideoFile) GetBytesThumbFileUrls() [][]byte {
	if x != nil {
		return x.BytesThumbFileUrls
	}
	return nil
}

func (x *VideoFile) GetBytesVideoFileUrls() [][]byte {
	if x != nil {
		return x.BytesVideoFileUrls
	}
	return nil
}

func (x *VideoFile) GetThumbDownloadFlag() uint32 {
	if x != nil && x.ThumbDownloadFlag != nil {
		return *x.ThumbDownloadFlag
	}
	return 0
}

func (x *VideoFile) GetVideoDownloadFlag() uint32 {
	if x != nil && x.VideoDownloadFlag != nil {
		return *x.VideoDownloadFlag
	}
	return 0
}

func (x *VideoFile) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type AnonymousGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags         *uint32 `protobuf:"varint,1,opt,name=Flags,proto3,oneof" json:"Flags,omitempty"`
	AnonymousId   []byte  `protobuf:"bytes,2,opt,name=AnonymousId,proto3,oneof" json:"AnonymousId,omitempty"`
	AnonymousNick []byte  `protobuf:"bytes,3,opt,name=AnonymousNick,proto3,oneof" json:"AnonymousNick,omitempty"`
	HeadPortrait  *uint32 `protobuf:"varint,4,opt,name=HeadPortrait,proto3,oneof" json:"HeadPortrait,omitempty"`
	ExpireTime    *uint32 `protobuf:"varint,5,opt,name=ExpireTime,proto3,oneof" json:"ExpireTime,omitempty"`
	BubbleId      *uint32 `protobuf:"varint,6,opt,name=BubbleId,proto3,oneof" json:"BubbleId,omitempty"`
	RankColor     []byte  `protobuf:"bytes,7,opt,name=RankColor,proto3,oneof" json:"RankColor,omitempty"`
}

func (x *AnonymousGroupMessage) Reset() {
	*x = AnonymousGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonymousGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonymousGroupMessage) ProtoMessage() {}

func (x *AnonymousGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonymousGroupMessage.ProtoReflect.Descriptor instead.
func (*AnonymousGroupMessage) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{15}
}

func (x *AnonymousGroupMessage) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *AnonymousGroupMessage) GetAnonymousId() []byte {
	if x != nil {
		return x.AnonymousId
	}
	return nil
}

func (x *AnonymousGroupMessage) GetAnonymousNick() []byte {
	if x != nil {
		return x.AnonymousNick
	}
	return nil
}

func (x *AnonymousGroupMessage) GetHeadPortrait() uint32 {
	if x != nil && x.HeadPortrait != nil {
		return *x.HeadPortrait
	}
	return 0
}

func (x *AnonymousGroupMessage) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *AnonymousGroupMessage) GetBubbleId() uint32 {
	if x != nil && x.BubbleId != nil {
		return *x.BubbleId
	}
	return 0
}

func (x *AnonymousGroupMessage) GetRankColor() []byte {
	if x != nil {
		return x.RankColor
	}
	return nil
}

type QQWalletAioElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Background      *uint32 `protobuf:"varint,1,opt,name=Background,proto3,oneof" json:"Background,omitempty"`
	Icon            *uint32 `protobuf:"varint,2,opt,name=Icon,proto3,oneof" json:"Icon,omitempty"`
	Title           *string `protobuf:"bytes,3,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	Subtitle        *string `protobuf:"bytes,4,opt,name=Subtitle,proto3,oneof" json:"Subtitle,omitempty"`
	Content         *string `protobuf:"bytes,5,opt,name=Content,proto3,oneof" json:"Content,omitempty"`
	LinkUrl         []byte  `protobuf:"bytes,6,opt,name=LinkUrl,proto3,oneof" json:"LinkUrl,omitempty"`
	BlackStripe     []byte  `protobuf:"bytes,7,opt,name=BlackStripe,proto3,oneof" json:"BlackStripe,omitempty"`
	Notice          []byte  `protobuf:"bytes,8,opt,name=Notice,proto3,oneof" json:"Notice,omitempty"`
	TitleColor      *uint32 `protobuf:"varint,9,opt,name=TitleColor,proto3,oneof" json:"TitleColor,omitempty"`
	SubtitleColor   *uint32 `protobuf:"varint,10,opt,name=SubtitleColor,proto3,oneof" json:"SubtitleColor,omitempty"`
	ActionsPriority []byte  `protobuf:"bytes,11,opt,name=ActionsPriority,proto3,oneof" json:"ActionsPriority,omitempty"`
	JumpUrl         []byte  `protobuf:"bytes,12,opt,name=JumpUrl,proto3,oneof" json:"JumpUrl,omitempty"`
	NativeIos       []byte  `protobuf:"bytes,13,opt,name=NativeIos,proto3,oneof" json:"NativeIos,omitempty"`
	NativeAndroid   []byte  `protobuf:"bytes,14,opt,name=NativeAndroid,proto3,oneof" json:"NativeAndroid,omitempty"`
	IconUrl         []byte  `protobuf:"bytes,15,opt,name=IconUrl,proto3,oneof" json:"IconUrl,omitempty"`
	ContentColor    *uint32 `protobuf:"varint,16,opt,name=ContentColor,proto3,oneof" json:"ContentColor,omitempty"`
	ContentBgColor  *uint32 `protobuf:"varint,17,opt,name=ContentBgColor,proto3,oneof" json:"ContentBgColor,omitempty"`
	AioImageLeft    []byte  `protobuf:"bytes,18,opt,name=AioImageLeft,proto3,oneof" json:"AioImageLeft,omitempty"`
	AioImageRight   []byte  `protobuf:"bytes,19,opt,name=AioImageRight,proto3,oneof" json:"AioImageRight,omitempty"`
	CftImage        []byte  `protobuf:"bytes,20,opt,name=CftImage,proto3,oneof" json:"CftImage,omitempty"`
	PbReserve       []byte  `protobuf:"bytes,21,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *QQWalletAioElem) Reset() {
	*x = QQWalletAioElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQWalletAioElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQWalletAioElem) ProtoMessage() {}

func (x *QQWalletAioElem) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQWalletAioElem.ProtoReflect.Descriptor instead.
func (*QQWalletAioElem) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{16}
}

func (x *QQWalletAioElem) GetBackground() uint32 {
	if x != nil && x.Background != nil {
		return *x.Background
	}
	return 0
}

func (x *QQWalletAioElem) GetIcon() uint32 {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return 0
}

func (x *QQWalletAioElem) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *QQWalletAioElem) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *QQWalletAioElem) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *QQWalletAioElem) GetLinkUrl() []byte {
	if x != nil {
		return x.LinkUrl
	}
	return nil
}

func (x *QQWalletAioElem) GetBlackStripe() []byte {
	if x != nil {
		return x.BlackStripe
	}
	return nil
}

func (x *QQWalletAioElem) GetNotice() []byte {
	if x != nil {
		return x.Notice
	}
	return nil
}

func (x *QQWalletAioElem) GetTitleColor() uint32 {
	if x != nil && x.TitleColor != nil {
		return *x.TitleColor
	}
	return 0
}

func (x *QQWalletAioElem) GetSubtitleColor() uint32 {
	if x != nil && x.SubtitleColor != nil {
		return *x.SubtitleColor
	}
	return 0
}

func (x *QQWalletAioElem) GetActionsPriority() []byte {
	if x != nil {
		return x.ActionsPriority
	}
	return nil
}

func (x *QQWalletAioElem) GetJumpUrl() []byte {
	if x != nil {
		return x.JumpUrl
	}
	return nil
}

func (x *QQWalletAioElem) GetNativeIos() []byte {
	if x != nil {
		return x.NativeIos
	}
	return nil
}

func (x *QQWalletAioElem) GetNativeAndroid() []byte {
	if x != nil {
		return x.NativeAndroid
	}
	return nil
}

func (x *QQWalletAioElem) GetIconUrl() []byte {
	if x != nil {
		return x.IconUrl
	}
	return nil
}

func (x *QQWalletAioElem) GetContentColor() uint32 {
	if x != nil && x.ContentColor != nil {
		return *x.ContentColor
	}
	return 0
}

func (x *QQWalletAioElem) GetContentBgColor() uint32 {
	if x != nil && x.ContentBgColor != nil {
		return *x.ContentBgColor
	}
	return 0
}

func (x *QQWalletAioElem) GetAioImageLeft() []byte {
	if x != nil {
		return x.AioImageLeft
	}
	return nil
}

func (x *QQWalletAioElem) GetAioImageRight() []byte {
	if x != nil {
		return x.AioImageRight
	}
	return nil
}

func (x *QQWalletAioElem) GetCftImage() []byte {
	if x != nil {
		return x.CftImage
	}
	return nil
}

func (x *QQWalletAioElem) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type QQWalletAioBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendUin         *uint64          `protobuf:"varint,1,opt,name=SendUin,proto3,oneof" json:"SendUin,omitempty"`
	Sender          *QQWalletAioElem `protobuf:"bytes,2,opt,name=Sender,proto3,oneof" json:"Sender,omitempty"`
	Receiver        *QQWalletAioElem `protobuf:"bytes,3,opt,name=Receiver,proto3,oneof" json:"Receiver,omitempty"`
	ChannelId       *int32           `protobuf:"varint,4,opt,name=ChannelId,proto3,oneof" json:"ChannelId,omitempty"`
	TemplateId      *int32           `protobuf:"varint,5,opt,name=TemplateId,proto3,oneof" json:"TemplateId,omitempty"`
	Resend          *uint32          `protobuf:"varint,6,opt,name=Resend,proto3,oneof" json:"Resend,omitempty"`
	MessagePriority *uint32          `protobuf:"varint,7,opt,name=MessagePriority,proto3,oneof" json:"MessagePriority,omitempty"`
	RedType         *int32           `protobuf:"varint,8,opt,name=RedType,proto3,oneof" json:"RedType,omitempty"`
	BillNum         []byte           `protobuf:"bytes,9,opt,name=BillNum,proto3,oneof" json:"BillNum,omitempty"`
	AuthKey         []byte           `protobuf:"bytes,10,opt,name=AuthKey,proto3,oneof" json:"AuthKey,omitempty"`
	SessionType     *int32           `protobuf:"varint,11,opt,name=SessionType,proto3,oneof" json:"SessionType,omitempty"`
	MessageType     *int32           `protobuf:"varint,12,opt,name=MessageType,proto3,oneof" json:"MessageType,omitempty"`
	EnvelOpeId      *int32           `protobuf:"varint,13,opt,name=EnvelOpeId,proto3,oneof" json:"EnvelOpeId,omitempty"`
	Name            []byte           `protobuf:"bytes,14,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	ConfType        *int32           `protobuf:"varint,15,opt,name=ConfType,proto3,oneof" json:"ConfType,omitempty"`
	MessageFrom     *int32           `protobuf:"varint,16,opt,name=MessageFrom,proto3,oneof" json:"MessageFrom,omitempty"`
	PcBody          []byte           `protobuf:"bytes,17,opt,name=PcBody,proto3,oneof" json:"PcBody,omitempty"`
	Index           []byte           `protobuf:"bytes,18,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
	RedChannel      *uint32          `protobuf:"varint,19,opt,name=RedChannel,proto3,oneof" json:"RedChannel,omitempty"`
	GrapUin         []uint64         `protobuf:"varint,20,rep,packed,name=GrapUin,proto3" json:"GrapUin,omitempty"`
	PbReserve       []byte           `protobuf:"bytes,21,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *QQWalletAioBody) Reset() {
	*x = QQWalletAioBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQWalletAioBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQWalletAioBody) ProtoMessage() {}

func (x *QQWalletAioBody) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQWalletAioBody.ProtoReflect.Descriptor instead.
func (*QQWalletAioBody) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{17}
}

func (x *QQWalletAioBody) GetSendUin() uint64 {
	if x != nil && x.SendUin != nil {
		return *x.SendUin
	}
	return 0
}

func (x *QQWalletAioBody) GetSender() *QQWalletAioElem {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *QQWalletAioBody) GetReceiver() *QQWalletAioElem {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *QQWalletAioBody) GetChannelId() int32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *QQWalletAioBody) GetTemplateId() int32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *QQWalletAioBody) GetResend() uint32 {
	if x != nil && x.Resend != nil {
		return *x.Resend
	}
	return 0
}

func (x *QQWalletAioBody) GetMessagePriority() uint32 {
	if x != nil && x.MessagePriority != nil {
		return *x.MessagePriority
	}
	return 0
}

func (x *QQWalletAioBody) GetRedType() int32 {
	if x != nil && x.RedType != nil {
		return *x.RedType
	}
	return 0
}

func (x *QQWalletAioBody) GetBillNum() []byte {
	if x != nil {
		return x.BillNum
	}
	return nil
}

func (x *QQWalletAioBody) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *QQWalletAioBody) GetSessionType() int32 {
	if x != nil && x.SessionType != nil {
		return *x.SessionType
	}
	return 0
}

func (x *QQWalletAioBody) GetMessageType() int32 {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return 0
}

func (x *QQWalletAioBody) GetEnvelOpeId() int32 {
	if x != nil && x.EnvelOpeId != nil {
		return *x.EnvelOpeId
	}
	return 0
}

func (x *QQWalletAioBody) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *QQWalletAioBody) GetConfType() int32 {
	if x != nil && x.ConfType != nil {
		return *x.ConfType
	}
	return 0
}

func (x *QQWalletAioBody) GetMessageFrom() int32 {
	if x != nil && x.MessageFrom != nil {
		return *x.MessageFrom
	}
	return 0
}

func (x *QQWalletAioBody) GetPcBody() []byte {
	if x != nil {
		return x.PcBody
	}
	return nil
}

func (x *QQWalletAioBody) GetIndex() []byte {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *QQWalletAioBody) GetRedChannel() uint32 {
	if x != nil && x.RedChannel != nil {
		return *x.RedChannel
	}
	return 0
}

func (x *QQWalletAioBody) GetGrapUin() []uint64 {
	if x != nil {
		return x.GrapUin
	}
	return nil
}

func (x *QQWalletAioBody) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type QQWalletMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QQWalletAioBody *QQWalletAioBody `protobuf:"bytes,1,opt,name=QQWalletAioBody,proto3,oneof" json:"QQWalletAioBody,omitempty"`
}

func (x *QQWalletMessage) Reset() {
	*x = QQWalletMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQWalletMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQWalletMessage) ProtoMessage() {}

func (x *QQWalletMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQWalletMessage.ProtoReflect.Descriptor instead.
func (*QQWalletMessage) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{18}
}

func (x *QQWalletMessage) GetQQWalletAioBody() *QQWalletAioBody {
	if x != nil {
		return x.QQWalletAioBody
	}
	return nil
}

type CustomElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc     []byte  `protobuf:"bytes,1,opt,name=Desc,proto3,oneof" json:"Desc,omitempty"`
	Data     []byte  `protobuf:"bytes,2,opt,name=Data,proto3,oneof" json:"Data,omitempty"`
	EnumType *uint32 `protobuf:"varint,3,opt,name=EnumType,proto3,oneof" json:"EnumType,omitempty"`
	Ext      []byte  `protobuf:"bytes,4,opt,name=Ext,proto3,oneof" json:"Ext,omitempty"`
	Sound    []byte  `protobuf:"bytes,5,opt,name=Sound,proto3,oneof" json:"Sound,omitempty"`
}

func (x *CustomElem) Reset() {
	*x = CustomElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomElem) ProtoMessage() {}

func (x *CustomElem) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomElem.ProtoReflect.Descriptor instead.
func (*CustomElem) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{19}
}

func (x *CustomElem) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *CustomElem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CustomElem) GetEnumType() uint32 {
	if x != nil && x.EnumType != nil {
		return *x.EnumType
	}
	return 0
}

func (x *CustomElem) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *CustomElem) GetSound() []byte {
	if x != nil {
		return x.Sound
	}
	return nil
}

type GeneralFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BubbleDiyTextId         *uint32 `protobuf:"varint,1,opt,name=BubbleDiyTextId,proto3,oneof" json:"BubbleDiyTextId,omitempty"`
	GroupFlagNew            *uint32 `protobuf:"varint,2,opt,name=GroupFlagNew,proto3,oneof" json:"GroupFlagNew,omitempty"`
	Uin                     *int64  `protobuf:"varint,3,opt,name=Uin,proto3,oneof" json:"Uin,omitempty"`
	ReplyId                 []byte  `protobuf:"bytes,4,opt,name=ReplyId,proto3,oneof" json:"ReplyId,omitempty"`
	PrpFold                 *uint32 `protobuf:"varint,5,opt,name=PrpFold,proto3,oneof" json:"PrpFold,omitempty"`
	LongTextFlag            *uint32 `protobuf:"varint,6,opt,name=LongTextFlag,proto3,oneof" json:"LongTextFlag,omitempty"`
	LongTextResid           *string `protobuf:"bytes,7,opt,name=LongTextResid,proto3,oneof" json:"LongTextResid,omitempty"`
	GroupType               *uint32 `protobuf:"varint,8,opt,name=GroupType,proto3,oneof" json:"GroupType,omitempty"`
	ToUinFlag               *uint32 `protobuf:"varint,9,opt,name=ToUinFlag,proto3,oneof" json:"ToUinFlag,omitempty"`
	GlamourLevel            *uint32 `protobuf:"varint,10,opt,name=GlamourLevel,proto3,oneof" json:"GlamourLevel,omitempty"`
	MemberLevel             *uint32 `protobuf:"varint,11,opt,name=MemberLevel,proto3,oneof" json:"MemberLevel,omitempty"`
	GroupRankSeqence        *int64  `protobuf:"varint,12,opt,name=GroupRankSeqence,proto3,oneof" json:"GroupRankSeqence,omitempty"`
	OlympicTorch            *uint32 `protobuf:"varint,13,opt,name=OlympicTorch,proto3,oneof" json:"OlympicTorch,omitempty"`
	BabyqGuideMessageCookie []byte  `protobuf:"bytes,14,opt,name=BabyqGuideMessageCookie,proto3,oneof" json:"BabyqGuideMessageCookie,omitempty"`
	Uin32ExpertFlag         *uint32 `protobuf:"varint,15,opt,name=Uin32ExpertFlag,proto3,oneof" json:"Uin32ExpertFlag,omitempty"`
	BubbleSubId             *uint32 `protobuf:"varint,16,opt,name=BubbleSubId,proto3,oneof" json:"BubbleSubId,omitempty"`
	PendantId               *int64  `protobuf:"varint,17,opt,name=PendantId,proto3,oneof" json:"PendantId,omitempty"`
	RpIndex                 []byte  `protobuf:"bytes,18,opt,name=RpIndex,proto3,oneof" json:"RpIndex,omitempty"`
	PbReserve               []byte  `protobuf:"bytes,19,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *GeneralFlags) Reset() {
	*x = GeneralFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralFlags) ProtoMessage() {}

func (x *GeneralFlags) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralFlags.ProtoReflect.Descriptor instead.
func (*GeneralFlags) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{20}
}

func (x *GeneralFlags) GetBubbleDiyTextId() uint32 {
	if x != nil && x.BubbleDiyTextId != nil {
		return *x.BubbleDiyTextId
	}
	return 0
}

func (x *GeneralFlags) GetGroupFlagNew() uint32 {
	if x != nil && x.GroupFlagNew != nil {
		return *x.GroupFlagNew
	}
	return 0
}

func (x *GeneralFlags) GetUin() int64 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *GeneralFlags) GetReplyId() []byte {
	if x != nil {
		return x.ReplyId
	}
	return nil
}

func (x *GeneralFlags) GetPrpFold() uint32 {
	if x != nil && x.PrpFold != nil {
		return *x.PrpFold
	}
	return 0
}

func (x *GeneralFlags) GetLongTextFlag() uint32 {
	if x != nil && x.LongTextFlag != nil {
		return *x.LongTextFlag
	}
	return 0
}

func (x *GeneralFlags) GetLongTextResid() string {
	if x != nil && x.LongTextResid != nil {
		return *x.LongTextResid
	}
	return ""
}

func (x *GeneralFlags) GetGroupType() uint32 {
	if x != nil && x.GroupType != nil {
		return *x.GroupType
	}
	return 0
}

func (x *GeneralFlags) GetToUinFlag() uint32 {
	if x != nil && x.ToUinFlag != nil {
		return *x.ToUinFlag
	}
	return 0
}

func (x *GeneralFlags) GetGlamourLevel() uint32 {
	if x != nil && x.GlamourLevel != nil {
		return *x.GlamourLevel
	}
	return 0
}

func (x *GeneralFlags) GetMemberLevel() uint32 {
	if x != nil && x.MemberLevel != nil {
		return *x.MemberLevel
	}
	return 0
}

func (x *GeneralFlags) GetGroupRankSeqence() int64 {
	if x != nil && x.GroupRankSeqence != nil {
		return *x.GroupRankSeqence
	}
	return 0
}

func (x *GeneralFlags) GetOlympicTorch() uint32 {
	if x != nil && x.OlympicTorch != nil {
		return *x.OlympicTorch
	}
	return 0
}

func (x *GeneralFlags) GetBabyqGuideMessageCookie() []byte {
	if x != nil {
		return x.BabyqGuideMessageCookie
	}
	return nil
}

func (x *GeneralFlags) GetUin32ExpertFlag() uint32 {
	if x != nil && x.Uin32ExpertFlag != nil {
		return *x.Uin32ExpertFlag
	}
	return 0
}

func (x *GeneralFlags) GetBubbleSubId() uint32 {
	if x != nil && x.BubbleSubId != nil {
		return *x.BubbleSubId
	}
	return 0
}

func (x *GeneralFlags) GetPendantId() int64 {
	if x != nil && x.PendantId != nil {
		return *x.PendantId
	}
	return 0
}

func (x *GeneralFlags) GetRpIndex() []byte {
	if x != nil {
		return x.RpIndex
	}
	return nil
}

func (x *GeneralFlags) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type SourceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalSeqences []uint32   `protobuf:"varint,1,rep,packed,name=OriginalSeqences,proto3" json:"OriginalSeqences,omitempty"`
	SenderUin        *int64     `protobuf:"varint,2,opt,name=SenderUin,proto3,oneof" json:"SenderUin,omitempty"`
	Time             *uint32    `protobuf:"varint,3,opt,name=Time,proto3,oneof" json:"Time,omitempty"`
	Flag             *uint32    `protobuf:"varint,4,opt,name=Flag,proto3,oneof" json:"Flag,omitempty"`
	Element          []*Element `protobuf:"bytes,5,rep,name=Element,proto3" json:"Element,omitempty"`
	Type             *uint32    `protobuf:"varint,6,opt,name=Type,proto3,oneof" json:"Type,omitempty"`
	RichMessage      []byte     `protobuf:"bytes,7,opt,name=RichMessage,proto3,oneof" json:"RichMessage,omitempty"`
	PbReserve        []byte     `protobuf:"bytes,8,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
	SourceMessage    []byte     `protobuf:"bytes,9,opt,name=SourceMessage,proto3,oneof" json:"SourceMessage,omitempty"`
	ToUin            *int64     `protobuf:"varint,10,opt,name=ToUin,proto3,oneof" json:"ToUin,omitempty"`
	TroopName        []byte     `protobuf:"bytes,11,opt,name=TroopName,proto3,oneof" json:"TroopName,omitempty"`
}

func (x *SourceMessage) Reset() {
	*x = SourceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMessage) ProtoMessage() {}

func (x *SourceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMessage.ProtoReflect.Descriptor instead.
func (*SourceMessage) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{21}
}

func (x *SourceMessage) GetOriginalSeqences() []uint32 {
	if x != nil {
		return x.OriginalSeqences
	}
	return nil
}

func (x *SourceMessage) GetSenderUin() int64 {
	if x != nil && x.SenderUin != nil {
		return *x.SenderUin
	}
	return 0
}

func (x *SourceMessage) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *SourceMessage) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *SourceMessage) GetElement() []*Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *SourceMessage) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SourceMessage) GetRichMessage() []byte {
	if x != nil {
		return x.RichMessage
	}
	return nil
}

func (x *SourceMessage) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

func (x *SourceMessage) GetSourceMessage() []byte {
	if x != nil {
		return x.SourceMessage
	}
	return nil
}

func (x *SourceMessage) GetToUin() int64 {
	if x != nil && x.ToUin != nil {
		return *x.ToUin
	}
	return 0
}

func (x *SourceMessage) GetTroopName() []byte {
	if x != nil {
		return x.TroopName
	}
	return nil
}

type LightAppElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []byte `protobuf:"bytes,1,opt,name=Data,proto3,oneof" json:"Data,omitempty"`
	MessageResId []byte `protobuf:"bytes,2,opt,name=MessageResId,proto3,oneof" json:"MessageResId,omitempty"`
}

func (x *LightAppElement) Reset() {
	*x = LightAppElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightAppElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightAppElement) ProtoMessage() {}

func (x *LightAppElement) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightAppElement.ProtoReflect.Descriptor instead.
func (*LightAppElement) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{22}
}

func (x *LightAppElement) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LightAppElement) GetMessageResId() []byte {
	if x != nil {
		return x.MessageResId
	}
	return nil
}

type CommonElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType  *uint32 `protobuf:"varint,1,opt,name=ServiceType,proto3,oneof" json:"ServiceType,omitempty"`
	PbElement    []byte  `protobuf:"bytes,2,opt,name=PbElement,proto3,oneof" json:"PbElement,omitempty"`
	BusinessType *uint32 `protobuf:"varint,3,opt,name=BusinessType,proto3,oneof" json:"BusinessType,omitempty"`
}

func (x *CommonElement) Reset() {
	*x = CommonElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonElement) ProtoMessage() {}

func (x *CommonElement) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonElement.ProtoReflect.Descriptor instead.
func (*CommonElement) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{23}
}

func (x *CommonElement) GetServiceType() uint32 {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return 0
}

func (x *CommonElement) GetPbElement() []byte {
	if x != nil {
		return x.PbElement
	}
	return nil
}

func (x *CommonElement) GetBusinessType() uint32 {
	if x != nil && x.BusinessType != nil {
		return *x.BusinessType
	}
	return 0
}

type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                  *PlainText             `protobuf:"bytes,1,opt,name=Text,proto3,oneof" json:"Text,omitempty"`
	Face                  *Face                  `protobuf:"bytes,2,opt,name=Face,proto3,oneof" json:"Face,omitempty"`
	OnlineImage           *OnlineImage           `protobuf:"bytes,3,opt,name=OnlineImage,proto3,oneof" json:"OnlineImage,omitempty"`
	NotOnlineImage        *NotOnlineImage        `protobuf:"bytes,4,opt,name=NotOnlineImage,proto3,oneof" json:"NotOnlineImage,omitempty"`
	TransElem             *TransElem             `protobuf:"bytes,5,opt,name=TransElem,proto3,oneof" json:"TransElem,omitempty"`
	MarketFace            *MarketFace            `protobuf:"bytes,6,opt,name=MarketFace,proto3,oneof" json:"MarketFace,omitempty"`
	CustomFace            *CustomFace            `protobuf:"bytes,8,opt,name=CustomFace,proto3,oneof" json:"CustomFace,omitempty"`
	ElemFlags2            *ElemFlags2            `protobuf:"bytes,9,opt,name=ElemFlags2,proto3,oneof" json:"ElemFlags2,omitempty"`
	RichMessage           *RichMessage           `protobuf:"bytes,12,opt,name=RichMessage,proto3,oneof" json:"RichMessage,omitempty"`
	GroupFile             *GroupFile             `protobuf:"bytes,13,opt,name=GroupFile,proto3,oneof" json:"GroupFile,omitempty"`
	ExtraInfo             *ExtraInfo             `protobuf:"bytes,16,opt,name=ExtraInfo,proto3,oneof" json:"ExtraInfo,omitempty"`
	VideoFile             *VideoFile             `protobuf:"bytes,19,opt,name=VideoFile,proto3,oneof" json:"VideoFile,omitempty"`
	AnonymousGroupMessage *AnonymousGroupMessage `protobuf:"bytes,21,opt,name=AnonymousGroupMessage,proto3,oneof" json:"AnonymousGroupMessage,omitempty"`
	QQWalletMessage       *QQWalletMessage       `protobuf:"bytes,24,opt,name=QQWalletMessage,proto3,oneof" json:"QQWalletMessage,omitempty"`
	CustomElem            *CustomElem            `protobuf:"bytes,31,opt,name=CustomElem,proto3,oneof" json:"CustomElem,omitempty"`
	GeneralFlags          *GeneralFlags          `protobuf:"bytes,37,opt,name=GeneralFlags,proto3,oneof" json:"GeneralFlags,omitempty"`
	SourceMessage         *SourceMessage         `protobuf:"bytes,45,opt,name=SourceMessage,proto3,oneof" json:"SourceMessage,omitempty"`
	LightAppElement       *LightAppElement       `protobuf:"bytes,51,opt,name=LightAppElement,proto3,oneof" json:"LightAppElement,omitempty"`
	CommonElement         *CommonElement         `protobuf:"bytes,53,opt,name=CommonElement,proto3,oneof" json:"CommonElement,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{24}
}

func (x *Element) GetText() *PlainText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Element) GetFace() *Face {
	if x != nil {
		return x.Face
	}
	return nil
}

func (x *Element) GetOnlineImage() *OnlineImage {
	if x != nil {
		return x.OnlineImage
	}
	return nil
}

func (x *Element) GetNotOnlineImage() *NotOnlineImage {
	if x != nil {
		return x.NotOnlineImage
	}
	return nil
}

func (x *Element) GetTransElem() *TransElem {
	if x != nil {
		return x.TransElem
	}
	return nil
}

func (x *Element) GetMarketFace() *MarketFace {
	if x != nil {
		return x.MarketFace
	}
	return nil
}

func (x *Element) GetCustomFace() *CustomFace {
	if x != nil {
		return x.CustomFace
	}
	return nil
}

func (x *Element) GetElemFlags2() *ElemFlags2 {
	if x != nil {
		return x.ElemFlags2
	}
	return nil
}

func (x *Element) GetRichMessage() *RichMessage {
	if x != nil {
		return x.RichMessage
	}
	return nil
}

func (x *Element) GetGroupFile() *GroupFile {
	if x != nil {
		return x.GroupFile
	}
	return nil
}

func (x *Element) GetExtraInfo() *ExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *Element) GetVideoFile() *VideoFile {
	if x != nil {
		return x.VideoFile
	}
	return nil
}

func (x *Element) GetAnonymousGroupMessage() *AnonymousGroupMessage {
	if x != nil {
		return x.AnonymousGroupMessage
	}
	return nil
}

func (x *Element) GetQQWalletMessage() *QQWalletMessage {
	if x != nil {
		return x.QQWalletMessage
	}
	return nil
}

func (x *Element) GetCustomElem() *CustomElem {
	if x != nil {
		return x.CustomElem
	}
	return nil
}

func (x *Element) GetGeneralFlags() *GeneralFlags {
	if x != nil {
		return x.GeneralFlags
	}
	return nil
}

func (x *Element) GetSourceMessage() *SourceMessage {
	if x != nil {
		return x.SourceMessage
	}
	return nil
}

func (x *Element) GetLightAppElement() *LightAppElement {
	if x != nil {
		return x.LightAppElement
	}
	return nil
}

func (x *Element) GetCommonElement() *CommonElement {
	if x != nil {
		return x.CommonElement
	}
	return nil
}

type NotOnlineFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType     *uint32  `protobuf:"varint,1,opt,name=FileType,proto3,oneof" json:"FileType,omitempty"`
	Sig          []byte   `protobuf:"bytes,2,opt,name=Sig,proto3,oneof" json:"Sig,omitempty"`
	FileUuid     []byte   `protobuf:"bytes,3,opt,name=FileUuid,proto3,oneof" json:"FileUuid,omitempty"`
	FileMd5      []byte   `protobuf:"bytes,4,opt,name=FileMd5,proto3,oneof" json:"FileMd5,omitempty"`
	FileName     []byte   `protobuf:"bytes,5,opt,name=FileName,proto3,oneof" json:"FileName,omitempty"`
	FileSize     *int64   `protobuf:"varint,6,opt,name=FileSize,proto3,oneof" json:"FileSize,omitempty"`
	Note         []byte   `protobuf:"bytes,7,opt,name=Note,proto3,oneof" json:"Note,omitempty"`
	Reserved     *uint32  `protobuf:"varint,8,opt,name=Reserved,proto3,oneof" json:"Reserved,omitempty"`
	SubCommand   *uint32  `protobuf:"varint,9,opt,name=SubCommand,proto3,oneof" json:"SubCommand,omitempty"`
	MicroCloud   *uint32  `protobuf:"varint,10,opt,name=MicroCloud,proto3,oneof" json:"MicroCloud,omitempty"`
	BytesFileUrl [][]byte `protobuf:"bytes,11,rep,name=BytesFileUrl,proto3" json:"BytesFileUrl,omitempty"`
	DownloadFlag *uint32  `protobuf:"varint,12,opt,name=DownloadFlag,proto3,oneof" json:"DownloadFlag,omitempty"`
	DangerEvel   *uint32  `protobuf:"varint,50,opt,name=DangerEvel,proto3,oneof" json:"DangerEvel,omitempty"`
	LifeTime     *uint32  `protobuf:"varint,51,opt,name=LifeTime,proto3,oneof" json:"LifeTime,omitempty"`
	UploadTime   *uint32  `protobuf:"varint,52,opt,name=UploadTime,proto3,oneof" json:"UploadTime,omitempty"`
	AbsFileType  *uint32  `protobuf:"varint,53,opt,name=AbsFileType,proto3,oneof" json:"AbsFileType,omitempty"`
	ClientType   *uint32  `protobuf:"varint,54,opt,name=ClientType,proto3,oneof" json:"ClientType,omitempty"`
	ExpireTime   *uint32  `protobuf:"varint,55,opt,name=ExpireTime,proto3,oneof" json:"ExpireTime,omitempty"`
	PbReserve    []byte   `protobuf:"bytes,56,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
}

func (x *NotOnlineFile) Reset() {
	*x = NotOnlineFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotOnlineFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotOnlineFile) ProtoMessage() {}

func (x *NotOnlineFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotOnlineFile.ProtoReflect.Descriptor instead.
func (*NotOnlineFile) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{25}
}

func (x *NotOnlineFile) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *NotOnlineFile) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *NotOnlineFile) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *NotOnlineFile) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *NotOnlineFile) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *NotOnlineFile) GetFileSize() int64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *NotOnlineFile) GetNote() []byte {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NotOnlineFile) GetReserved() uint32 {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return 0
}

func (x *NotOnlineFile) GetSubCommand() uint32 {
	if x != nil && x.SubCommand != nil {
		return *x.SubCommand
	}
	return 0
}

func (x *NotOnlineFile) GetMicroCloud() uint32 {
	if x != nil && x.MicroCloud != nil {
		return *x.MicroCloud
	}
	return 0
}

func (x *NotOnlineFile) GetBytesFileUrl() [][]byte {
	if x != nil {
		return x.BytesFileUrl
	}
	return nil
}

func (x *NotOnlineFile) GetDownloadFlag() uint32 {
	if x != nil && x.DownloadFlag != nil {
		return *x.DownloadFlag
	}
	return 0
}

func (x *NotOnlineFile) GetDangerEvel() uint32 {
	if x != nil && x.DangerEvel != nil {
		return *x.DangerEvel
	}
	return 0
}

func (x *NotOnlineFile) GetLifeTime() uint32 {
	if x != nil && x.LifeTime != nil {
		return *x.LifeTime
	}
	return 0
}

func (x *NotOnlineFile) GetUploadTime() uint32 {
	if x != nil && x.UploadTime != nil {
		return *x.UploadTime
	}
	return 0
}

func (x *NotOnlineFile) GetAbsFileType() uint32 {
	if x != nil && x.AbsFileType != nil {
		return *x.AbsFileType
	}
	return 0
}

func (x *NotOnlineFile) GetClientType() uint32 {
	if x != nil && x.ClientType != nil {
		return *x.ClientType
	}
	return 0
}

func (x *NotOnlineFile) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *NotOnlineFile) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

type Ptt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType      *uint32  `protobuf:"varint,1,opt,name=FileType,proto3,oneof" json:"FileType,omitempty"`
	SourceUin     *int64   `protobuf:"varint,2,opt,name=SourceUin,proto3,oneof" json:"SourceUin,omitempty"`
	FileUuid      []byte   `protobuf:"bytes,3,opt,name=FileUuid,proto3,oneof" json:"FileUuid,omitempty"`
	FileMd5       []byte   `protobuf:"bytes,4,opt,name=FileMd5,proto3,oneof" json:"FileMd5,omitempty"`
	FileName      *string  `protobuf:"bytes,5,opt,name=FileName,proto3,oneof" json:"FileName,omitempty"`
	FileSize      *uint32  `protobuf:"varint,6,opt,name=FileSize,proto3,oneof" json:"FileSize,omitempty"`
	Reserve       []byte   `protobuf:"bytes,7,opt,name=Reserve,proto3,oneof" json:"Reserve,omitempty"`
	FileId        *uint32  `protobuf:"varint,8,opt,name=FileId,proto3,oneof" json:"FileId,omitempty"`
	ServerIp      *uint32  `protobuf:"varint,9,opt,name=ServerIp,proto3,oneof" json:"ServerIp,omitempty"`
	ServerPort    *uint32  `protobuf:"varint,10,opt,name=ServerPort,proto3,oneof" json:"ServerPort,omitempty"`
	Valid         *bool    `protobuf:"varint,11,opt,name=Valid,proto3,oneof" json:"Valid,omitempty"`
	Signature     []byte   `protobuf:"bytes,12,opt,name=Signature,proto3,oneof" json:"Signature,omitempty"`
	ShortCut      []byte   `protobuf:"bytes,13,opt,name=ShortCut,proto3,oneof" json:"ShortCut,omitempty"`
	FileKey       []byte   `protobuf:"bytes,14,opt,name=FileKey,proto3,oneof" json:"FileKey,omitempty"`
	MagicPttIndex *uint32  `protobuf:"varint,15,opt,name=MagicPttIndex,proto3,oneof" json:"MagicPttIndex,omitempty"`
	VoiceSwitch   *uint32  `protobuf:"varint,16,opt,name=VoiceSwitch,proto3,oneof" json:"VoiceSwitch,omitempty"`
	PttUrl        []byte   `protobuf:"bytes,17,opt,name=PttUrl,proto3,oneof" json:"PttUrl,omitempty"`
	GroupFileKey  []byte   `protobuf:"bytes,18,opt,name=GroupFileKey,proto3,oneof" json:"GroupFileKey,omitempty"`
	Time          *uint32  `protobuf:"varint,19,opt,name=Time,proto3,oneof" json:"Time,omitempty"`
	DownPara      []byte   `protobuf:"bytes,20,opt,name=DownPara,proto3,oneof" json:"DownPara,omitempty"`
	Format        *uint32  `protobuf:"varint,29,opt,name=Format,proto3,oneof" json:"Format,omitempty"`
	PbReserve     []byte   `protobuf:"bytes,30,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
	BytesPttUrls  [][]byte `protobuf:"bytes,31,rep,name=BytesPttUrls,proto3" json:"BytesPttUrls,omitempty"`
	DownloadFlag  *uint32  `protobuf:"varint,32,opt,name=DownloadFlag,proto3,oneof" json:"DownloadFlag,omitempty"`
}

func (x *Ptt) Reset() {
	*x = Ptt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ptt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ptt) ProtoMessage() {}

func (x *Ptt) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ptt.ProtoReflect.Descriptor instead.
func (*Ptt) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{26}
}

func (x *Ptt) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *Ptt) GetSourceUin() int64 {
	if x != nil && x.SourceUin != nil {
		return *x.SourceUin
	}
	return 0
}

func (x *Ptt) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *Ptt) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *Ptt) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Ptt) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *Ptt) GetReserve() []byte {
	if x != nil {
		return x.Reserve
	}
	return nil
}

func (x *Ptt) GetFileId() uint32 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *Ptt) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *Ptt) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *Ptt) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

func (x *Ptt) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Ptt) GetShortCut() []byte {
	if x != nil {
		return x.ShortCut
	}
	return nil
}

func (x *Ptt) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *Ptt) GetMagicPttIndex() uint32 {
	if x != nil && x.MagicPttIndex != nil {
		return *x.MagicPttIndex
	}
	return 0
}

func (x *Ptt) GetVoiceSwitch() uint32 {
	if x != nil && x.VoiceSwitch != nil {
		return *x.VoiceSwitch
	}
	return 0
}

func (x *Ptt) GetPttUrl() []byte {
	if x != nil {
		return x.PttUrl
	}
	return nil
}

func (x *Ptt) GetGroupFileKey() []byte {
	if x != nil {
		return x.GroupFileKey
	}
	return nil
}

func (x *Ptt) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *Ptt) GetDownPara() []byte {
	if x != nil {
		return x.DownPara
	}
	return nil
}

func (x *Ptt) GetFormat() uint32 {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return 0
}

func (x *Ptt) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

func (x *Ptt) GetBytesPttUrls() [][]byte {
	if x != nil {
		return x.BytesPttUrls
	}
	return nil
}

func (x *Ptt) GetDownloadFlag() uint32 {
	if x != nil && x.DownloadFlag != nil {
		return *x.DownloadFlag
	}
	return 0
}

type TempPtt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType      *uint32 `protobuf:"varint,1,opt,name=FileType,proto3,oneof" json:"FileType,omitempty"`
	FileUuid      []byte  `protobuf:"bytes,2,opt,name=FileUuid,proto3,oneof" json:"FileUuid,omitempty"`
	FileMd5       []byte  `protobuf:"bytes,3,opt,name=FileMd5,proto3,oneof" json:"FileMd5,omitempty"`
	FileName      []byte  `protobuf:"bytes,4,opt,name=FileName,proto3,oneof" json:"FileName,omitempty"`
	FileSize      *uint32 `protobuf:"varint,5,opt,name=FileSize,proto3,oneof" json:"FileSize,omitempty"`
	PttTimes      *uint32 `protobuf:"varint,6,opt,name=PttTimes,proto3,oneof" json:"PttTimes,omitempty"`
	UserType      *uint32 `protobuf:"varint,7,opt,name=UserType,proto3,oneof" json:"UserType,omitempty"`
	PttTransFlag  *uint32 `protobuf:"varint,8,opt,name=PttTransFlag,proto3,oneof" json:"PttTransFlag,omitempty"`
	BusiType      *uint32 `protobuf:"varint,9,opt,name=BusiType,proto3,oneof" json:"BusiType,omitempty"`
	MessageId     *uint64 `protobuf:"varint,10,opt,name=MessageId,proto3,oneof" json:"MessageId,omitempty"`
	PbReserve     []byte  `protobuf:"bytes,30,opt,name=PbReserve,proto3,oneof" json:"PbReserve,omitempty"`
	PttEncodeData []byte  `protobuf:"bytes,31,opt,name=PttEncodeData,proto3,oneof" json:"PttEncodeData,omitempty"`
}

func (x *TempPtt) Reset() {
	*x = TempPtt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempPtt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempPtt) ProtoMessage() {}

func (x *TempPtt) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempPtt.ProtoReflect.Descriptor instead.
func (*TempPtt) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{27}
}

func (x *TempPtt) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *TempPtt) GetFileUuid() []byte {
	if x != nil {
		return x.FileUuid
	}
	return nil
}

func (x *TempPtt) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *TempPtt) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *TempPtt) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *TempPtt) GetPttTimes() uint32 {
	if x != nil && x.PttTimes != nil {
		return *x.PttTimes
	}
	return 0
}

func (x *TempPtt) GetUserType() uint32 {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return 0
}

func (x *TempPtt) GetPttTransFlag() uint32 {
	if x != nil && x.PttTransFlag != nil {
		return *x.PttTransFlag
	}
	return 0
}

func (x *TempPtt) GetBusiType() uint32 {
	if x != nil && x.BusiType != nil {
		return *x.BusiType
	}
	return 0
}

func (x *TempPtt) GetMessageId() uint64 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return 0
}

func (x *TempPtt) GetPbReserve() []byte {
	if x != nil {
		return x.PbReserve
	}
	return nil
}

func (x *TempPtt) GetPttEncodeData() []byte {
	if x != nil {
		return x.PttEncodeData
	}
	return nil
}

type Trans211TempMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageBody []byte  `protobuf:"bytes,1,opt,name=MessageBody,proto3,oneof" json:"MessageBody,omitempty"`
	C2CCmd      *uint32 `protobuf:"varint,2,opt,name=C2CCmd,proto3,oneof" json:"C2CCmd,omitempty"`
}

func (x *Trans211TempMessage) Reset() {
	*x = Trans211TempMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trans211TempMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trans211TempMessage) ProtoMessage() {}

func (x *Trans211TempMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trans211TempMessage.ProtoReflect.Descriptor instead.
func (*Trans211TempMessage) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{28}
}

func (x *Trans211TempMessage) GetMessageBody() []byte {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

func (x *Trans211TempMessage) GetC2CCmd() uint32 {
	if x != nil && x.C2CCmd != nil {
		return *x.C2CCmd
	}
	return 0
}

type RichText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute           *Attribute           `protobuf:"bytes,1,opt,name=Attribute,proto3,oneof" json:"Attribute,omitempty"`
	Element             []*Element           `protobuf:"bytes,2,rep,name=Element,proto3" json:"Element,omitempty"`
	NotOnlineFile       *NotOnlineFile       `protobuf:"bytes,3,opt,name=NotOnlineFile,proto3,oneof" json:"NotOnlineFile,omitempty"`
	Ptt                 *Ptt                 `protobuf:"bytes,4,opt,name=Ptt,proto3,oneof" json:"Ptt,omitempty"`
	TempPtt             *TempPtt             `protobuf:"bytes,5,opt,name=TempPtt,proto3,oneof" json:"TempPtt,omitempty"`
	Trans211TempMessage *Trans211TempMessage `protobuf:"bytes,6,opt,name=Trans211TempMessage,proto3,oneof" json:"Trans211TempMessage,omitempty"`
}

func (x *RichText) Reset() {
	*x = RichText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichText) ProtoMessage() {}

func (x *RichText) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichText.ProtoReflect.Descriptor instead.
func (*RichText) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{29}
}

func (x *RichText) GetAttribute() *Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *RichText) GetElement() []*Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *RichText) GetNotOnlineFile() *NotOnlineFile {
	if x != nil {
		return x.NotOnlineFile
	}
	return nil
}

func (x *RichText) GetPtt() *Ptt {
	if x != nil {
		return x.Ptt
	}
	return nil
}

func (x *RichText) GetTempPtt() *TempPtt {
	if x != nil {
		return x.TempPtt
	}
	return nil
}

func (x *RichText) GetTrans211TempMessage() *Trans211TempMessage {
	if x != nil {
		return x.Trans211TempMessage
	}
	return nil
}

type MessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichText       *RichText `protobuf:"bytes,1,opt,name=RichText,proto3,oneof" json:"RichText,omitempty"`
	Content        []byte    `protobuf:"bytes,2,opt,name=Content,proto3,oneof" json:"Content,omitempty"`
	EncryptContent []byte    `protobuf:"bytes,3,opt,name=EncryptContent,proto3,oneof" json:"EncryptContent,omitempty"`
}

func (x *MessageBody) Reset() {
	*x = MessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageBody_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBody) ProtoMessage() {}

func (x *MessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageBody_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBody.ProtoReflect.Descriptor instead.
func (*MessageBody) Descriptor() ([]byte, []int) {
	return file_message_messageBody_proto_rawDescGZIP(), []int{30}
}

func (x *MessageBody) GetRichText() *RichText {
	if x != nil {
		return x.RichText
	}
	return nil
}

func (x *MessageBody) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *MessageBody) GetEncryptContent() []byte {
	if x != nil {
		return x.EncryptContent
	}
	return nil
}

var File_message_messageBody_proto protoreflect.FileDescriptor

var file_message_messageBody_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x03, 0x0a, 0x09,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x08, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x03, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x53, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x06, 0x52, 0x07, 0x43, 0x68, 0x61, 0x72, 0x53, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x50, 0x69, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0e, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x46, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x53, 0x65, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x69, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xba, 0x02, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4c,
	0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x4c, 0x69, 0x6e,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x36, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02,
	0x52, 0x10, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x36, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x37, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x03, 0x52, 0x10, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x37, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x36, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x37, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x22, 0x72, 0x0a,
	0x04, 0x46, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x4f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52,
	0x03, 0x4f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x4f, 0x6c, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x04, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x04, 0x47, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x4f,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x12, 0x4f, 0x6c, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x47, 0x75, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x4f, 0x6c, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xa5, 0x0a,
	0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x12, 0x4f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x12, 0x4f,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52,
	0x0c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0a, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0d,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0c, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x52, 0x65, 0x73,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x52, 0x65, 0x73, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x0a, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x08, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x0c, 0x52, 0x08, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x06, 0x42, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x10, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x11,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4f, 0x70,
	0x46, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x12, 0x52, 0x0c, 0x4f, 0x70, 0x46, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x4f, 0x6c, 0x64, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x64, 0x35, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x0d, 0x4f, 0x6c,
	0x64, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x14, 0x52, 0x0a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x15, 0x52, 0x0b, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x16, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x4c,
	0x65, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x17, 0x52, 0x07, 0x53, 0x68, 0x6f, 0x77,
	0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4c, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x18, 0x52, 0x0b, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x19, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x4f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x64, 0x35, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x52, 0x65, 0x73, 0x49, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x55, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x4f, 0x70, 0x46, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x4f, 0x6c, 0x64, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x64,
	0x35, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x22, 0x6a, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x45, 0x6c, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x45, 0x6c, 0x65, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x45, 0x6c, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x45, 0x6c, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xd6, 0x04, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x46, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x04, 0x52, 0x05, 0x54, 0x61, 0x62, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x07,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x07, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x08, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0b, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x0b, 0x52, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0c, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x61, 0x62, 0x49,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x4b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x22, 0xf5, 0x0b, 0x0a, 0x0a, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x47, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x47, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x04, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4f, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x07, 0x4f,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x0a, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0b, 0x52, 0x06, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x4d, 0x64, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0c, 0x52, 0x03, 0x4d, 0x64,
	0x35, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x42, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x42, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x07, 0x42, 0x69,
	0x7a, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52,
	0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x09, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x16, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x19, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x0a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x0b, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53,
	0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x07,
	0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x1d, 0x52, 0x0b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x5f, 0x34, 0x30, 0x30, 0x55, 0x72, 0x6c, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x06, 0x34, 0x30, 0x30, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x5f, 0x34, 0x30, 0x30, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1f, 0x52, 0x08, 0x34, 0x30, 0x30, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x5f, 0x34, 0x30, 0x30, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x09, 0x34, 0x30, 0x30, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x21, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x47, 0x75, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x4f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4d, 0x64, 0x35,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x42, 0x69, 0x67, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x42, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x58,
	0x5f, 0x34, 0x30, 0x30, 0x55, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x58, 0x5f, 0x34, 0x30, 0x30,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x22, 0x53, 0x0a, 0x04, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x50, 0x63, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x0a, 0x50, 0x63, 0x50, 0x74,
	0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a,
	0x50, 0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x50, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x08, 0x50, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x4d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x45,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x4d, 0x61, 0x63, 0x50,
	0x74, 0x6c, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x74, 0x6c, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x50,
	0x74, 0x6c, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x74,
	0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x50, 0x74, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x50, 0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x50, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x4d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x4d, 0x61, 0x63, 0x50, 0x74, 0x6c, 0x45, 0x6e, 0x64, 0x22, 0xf3, 0x05, 0x0a,
	0x0a, 0x45, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x12, 0x25, 0x0a, 0x0b, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x02, 0x52, 0x10, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x50, 0x74, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0c,
	0x50, 0x74, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x56, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x04, 0x52, 0x09, 0x56, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x04, 0x49,
	0x6e, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x52, 0x04, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x70, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52,
	0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x70, 0x74, 0x43, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x48, 0x07, 0x52, 0x07, 0x53, 0x72, 0x63,
	0x49, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x09, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x08,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x0a, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x0c, 0x50, 0x63, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x63, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x66, 0x48, 0x0b, 0x52, 0x0c, 0x50, 0x63, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x43, 0x72, 0x6d, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x08, 0x43, 0x72,
	0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x57, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x50, 0x74, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x56, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x70, 0x74, 0x43, 0x6e, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x53, 0x72, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x6f, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x63, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x72, 0x6d, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02,
	0x52, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x03, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x65,
	0x71, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x07, 0x53,
	0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x52, 0x61, 0x6e, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xe3, 0x03, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09,
	0x46, 0x69, 0x6c, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x07, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x69, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x07, 0x46, 0x69,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4d, 0x61, 0x72, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x04, 0x4d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x65, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x08, 0x52, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x09, 0x50,
	0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x46, 0x69, 0x6c, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4d, 0x61,
	0x72, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x22, 0xe3, 0x04, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x41, 0x70, 0x6e, 0x73, 0x54, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x07, 0x52, 0x08, 0x41, 0x70, 0x6e, 0x73, 0x54, 0x69, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x55, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x03,
	0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x41, 0x70, 0x6e, 0x73, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a,
	0x52, 0x0d, 0x41, 0x70, 0x6e, 0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x41,
	0x70, 0x6e, 0x73, 0x54, 0x69, 0x70, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x55, 0x69, 0x6e, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x41, 0x70, 0x6e, 0x73, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4e, 0x65, 0x77, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x90, 0x0a, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64,
	0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0a, 0x46, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x06, 0x52, 0x0a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0b, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x08, 0x52, 0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x42, 0x75,
	0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x08,
	0x42, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0c, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0f, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x42, 0x75, 0x73,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x11, 0x52, 0x0b, 0x53,
	0x75, 0x62, 0x42, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x62, 0x75, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x74, 0x74,
	0x72, 0x62, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x11, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x13, 0x52, 0x11, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x14, 0x52, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x15, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x42, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x53, 0x75, 0x62, 0x42, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x62, 0x75, 0x74, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x15, 0x41,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52,
	0x0d, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04,
	0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x05, 0x52, 0x08, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4e, 0x69, 0x63, 0x6b, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xb7, 0x08, 0x0a, 0x0f, 0x51,
	0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x23,
	0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x53, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x07, 0x4c, 0x69, 0x6e, 0x6b,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0b, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52,
	0x06, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08,
	0x52, 0x0a, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x0a, 0x52, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4a, 0x75, 0x6d,
	0x70, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0b, 0x52, 0x07, 0x4a, 0x75,
	0x6d, 0x70, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0c, 0x52, 0x09, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x0d, 0x52, 0x0d, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0e, 0x52, 0x07, 0x49, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x41,
	0x69, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x11, 0x52, 0x0c, 0x41, 0x69, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x66,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x41, 0x69, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x12, 0x52, 0x0d, 0x41,
	0x69, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x43, 0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x13, 0x52, 0x08, 0x43, 0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x14, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4a,
	0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6f, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41, 0x69, 0x6f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x41, 0x69, 0x6f, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x66,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x22, 0xfc, 0x07, 0x0a, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x69, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64,
	0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x53, 0x65, 0x6e,
	0x64, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x69, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x01, 0x52, 0x06, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x02, 0x52, 0x08, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x05, 0x52, 0x06, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x52, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x07, 0x52, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x08, 0x52,
	0x07, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x07,
	0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0a, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x4f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0a,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0d, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x50, 0x63, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x10,
	0x52, 0x06, 0x50, 0x63, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x11, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0a, 0x52, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x47, 0x72,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x13, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x65, 0x6e,
	0x64, 0x55, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x50, 0x63, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x22, 0x66, 0x0a, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x69, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x42, 0x6f, 0x64,
	0x79, 0x48, 0x00, 0x52, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x69, 0x6f,
	0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x51, 0x51, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x69, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x01, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02,
	0x52, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x45, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x03, 0x45, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x45, 0x78, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x22, 0xac, 0x08, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x79, 0x54, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0f, 0x42, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x79, 0x54, 0x65, 0x78, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x4e, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x55, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x03, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x03, 0x52, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x50, 0x72, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x04, 0x52, 0x07, 0x50, 0x72, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0c, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x4c, 0x6f, 0x6e, 0x67, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0d, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x09, 0x54, 0x6f, 0x55, 0x69,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x47, 0x6c, 0x61, 0x6d,
	0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09,
	0x52, 0x0c, 0x47, 0x6c, 0x61, 0x6d, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x0b, 0x52, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4f, 0x6c, 0x79,
	0x6d, 0x70, 0x69, 0x63, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x0c, 0x52, 0x0c, 0x4f, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x42, 0x61, 0x62, 0x79, 0x71, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x0d, 0x52, 0x17, 0x42, 0x61, 0x62, 0x79, 0x71, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x55, 0x69, 0x6e, 0x33, 0x32, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0f, 0x55, 0x69,
	0x6e, 0x33, 0x32, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x49, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x0b, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x53,
	0x75, 0x62, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x09, 0x50, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x11, 0x52, 0x07, 0x52,
	0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x12, 0x52, 0x09,
	0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x79, 0x54, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x4e, 0x65,
	0x77, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x55, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x70, 0x46, 0x6f, 0x6c,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x47, 0x6c, 0x61, 0x6d, 0x6f, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4f, 0x6c, 0x79, 0x6d, 0x70,
	0x69, 0x63, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x42, 0x61, 0x62, 0x79,
	0x71, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x55, 0x69, 0x6e, 0x33, 0x32, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x53, 0x75, 0x62, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x70, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x22,
	0xf1, 0x03, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x09, 0x50, 0x62, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x06, 0x52, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x05, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x08, 0x52, 0x09, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x46, 0x6c,
	0x61, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x52, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x54, 0x6f, 0x55, 0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x0f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x70, 0x70, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50,
	0x62, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01,
	0x52, 0x09, 0x50, 0x62, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xad, 0x0a, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x46, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x48, 0x01, 0x52, 0x04,
	0x46, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e,
	0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x03, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x04, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x48, 0x05, 0x52, 0x0a, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x48, 0x06, 0x52, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x0a, 0x45, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x48, 0x07,
	0x52, 0x0a, 0x45, 0x6c, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x08, 0x52, 0x0b, 0x52, 0x69, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x0a, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x0b, 0x52, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x51, 0x0a, 0x15, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x0c, 0x52, 0x15, 0x41, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x0d, 0x52, 0x0f, 0x51, 0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45,
	0x6c, 0x65, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x0e, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x6c, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x48, 0x0f, 0x52, 0x0c,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x10, 0x52, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x70, 0x70, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x70, 0x70, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x11, 0x52, 0x0f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x70,
	0x70, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x12, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x46, 0x61, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4e, 0x6f, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x45, 0x6c, 0x65, 0x6d,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x51,
	0x51, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x70, 0x70, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x07, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x53, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x03, 0x53, 0x69, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x02, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x03, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x04, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x06, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x08, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0a, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x0a, 0x52, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x0a, 0x44, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x4c, 0x69, 0x66, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x08, 0x4c, 0x69,
	0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52,
	0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x41, 0x62, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0b, 0x41, 0x62, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x0a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10,
	0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x11, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x53, 0x69, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e,
	0x6f, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6c, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x41,
	0x62, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x22, 0xda, 0x08, 0x0a, 0x03, 0x50, 0x74, 0x74, 0x12, 0x1f,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x08, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x0b, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0c, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0d, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x50, 0x74, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0d, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x50, 0x74, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x50, 0x74, 0x74, 0x55, 0x72, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x10, 0x52, 0x06, 0x50, 0x74, 0x74, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x11, 0x52, 0x0c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x13, 0x52, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x14, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x15, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x74, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x50, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x16, 0x52, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x69,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x50,
	0x74, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x50, 0x74, 0x74, 0x55,
	0x72, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0xcf, 0x04, 0x0a, 0x07, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x12,
	0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x02, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x03, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x50, 0x74, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x08, 0x50, 0x74, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x50, 0x74, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0c, 0x50, 0x74,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x42, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x08, 0x52, 0x08, 0x42, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x0a, 0x52, 0x09, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x74, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0b, 0x52, 0x0d, 0x50,
	0x74, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x64, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x50, 0x74, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x74,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x42,
	0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x74, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31,
	0x31, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x43, 0x32, 0x43, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x43, 0x32, 0x43, 0x43, 0x6d, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x43, 0x32, 0x43, 0x43, 0x6d, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x08,
	0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x4e,
	0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x01, 0x52, 0x0d, 0x4e, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x50, 0x74, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x50, 0x74, 0x74, 0x48, 0x02, 0x52, 0x03, 0x50, 0x74, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x48, 0x03,
	0x52, 0x07, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x32, 0x31, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x04, 0x52, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4e, 0x6f, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x50, 0x74,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x74, 0x74, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x32, 0x31, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x08, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x73, 0x68, 0x31, 0x32, 0x33, 0x34, 0x35, 0x2f, 0x67, 0x6f, 0x2d, 0x71, 0x71, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_messageBody_proto_rawDescOnce sync.Once
	file_message_messageBody_proto_rawDescData = file_message_messageBody_proto_rawDesc
)

func file_message_messageBody_proto_rawDescGZIP() []byte {
	file_message_messageBody_proto_rawDescOnce.Do(func() {
		file_message_messageBody_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_messageBody_proto_rawDescData)
	})
	return file_message_messageBody_proto_rawDescData
}

var file_message_messageBody_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_message_messageBody_proto_goTypes = []interface{}{
	(*Attribute)(nil),             // 0: Attribute
	(*PlainText)(nil),             // 1: PlainText
	(*Face)(nil),                  // 2: Face
	(*OnlineImage)(nil),           // 3: OnlineImage
	(*NotOnlineImage)(nil),        // 4: NotOnlineImage
	(*TransElem)(nil),             // 5: TransElem
	(*MarketFace)(nil),            // 6: MarketFace
	(*CustomFace)(nil),            // 7: CustomFace
	(*Inst)(nil),                  // 8: Inst
	(*PcSupportDef)(nil),          // 9: PcSupportDef
	(*ElemFlags2)(nil),            // 10: ElemFlags2
	(*RichMessage)(nil),           // 11: RichMessage
	(*GroupFile)(nil),             // 12: GroupFile
	(*ExtraInfo)(nil),             // 13: ExtraInfo
	(*VideoFile)(nil),             // 14: VideoFile
	(*AnonymousGroupMessage)(nil), // 15: AnonymousGroupMessage
	(*QQWalletAioElem)(nil),       // 16: QQWalletAioElem
	(*QQWalletAioBody)(nil),       // 17: QQWalletAioBody
	(*QQWalletMessage)(nil),       // 18: QQWalletMessage
	(*CustomElem)(nil),            // 19: CustomElem
	(*GeneralFlags)(nil),          // 20: GeneralFlags
	(*SourceMessage)(nil),         // 21: SourceMessage
	(*LightAppElement)(nil),       // 22: LightAppElement
	(*CommonElement)(nil),         // 23: CommonElement
	(*Element)(nil),               // 24: Element
	(*NotOnlineFile)(nil),         // 25: NotOnlineFile
	(*Ptt)(nil),                   // 26: Ptt
	(*TempPtt)(nil),               // 27: TempPtt
	(*Trans211TempMessage)(nil),   // 28: Trans211TempMessage
	(*RichText)(nil),              // 29: RichText
	(*MessageBody)(nil),           // 30: MessageBody
}
var file_message_messageBody_proto_depIdxs = []int32{
	8,  // 0: ElemFlags2.Inst:type_name -> Inst
	8,  // 1: ElemFlags2.SrcInst:type_name -> Inst
	9,  // 2: ElemFlags2.PcSupportDef:type_name -> PcSupportDef
	16, // 3: QQWalletAioBody.Sender:type_name -> QQWalletAioElem
	16, // 4: QQWalletAioBody.Receiver:type_name -> QQWalletAioElem
	17, // 5: QQWalletMessage.QQWalletAioBody:type_name -> QQWalletAioBody
	24, // 6: SourceMessage.Element:type_name -> Element
	1,  // 7: Element.Text:type_name -> PlainText
	2,  // 8: Element.Face:type_name -> Face
	3,  // 9: Element.OnlineImage:type_name -> OnlineImage
	4,  // 10: Element.NotOnlineImage:type_name -> NotOnlineImage
	5,  // 11: Element.TransElem:type_name -> TransElem
	6,  // 12: Element.MarketFace:type_name -> MarketFace
	7,  // 13: Element.CustomFace:type_name -> CustomFace
	10, // 14: Element.ElemFlags2:type_name -> ElemFlags2
	11, // 15: Element.RichMessage:type_name -> RichMessage
	12, // 16: Element.GroupFile:type_name -> GroupFile
	13, // 17: Element.ExtraInfo:type_name -> ExtraInfo
	14, // 18: Element.VideoFile:type_name -> VideoFile
	15, // 19: Element.AnonymousGroupMessage:type_name -> AnonymousGroupMessage
	18, // 20: Element.QQWalletMessage:type_name -> QQWalletMessage
	19, // 21: Element.CustomElem:type_name -> CustomElem
	20, // 22: Element.GeneralFlags:type_name -> GeneralFlags
	21, // 23: Element.SourceMessage:type_name -> SourceMessage
	22, // 24: Element.LightAppElement:type_name -> LightAppElement
	23, // 25: Element.CommonElement:type_name -> CommonElement
	0,  // 26: RichText.Attribute:type_name -> Attribute
	24, // 27: RichText.Element:type_name -> Element
	25, // 28: RichText.NotOnlineFile:type_name -> NotOnlineFile
	26, // 29: RichText.Ptt:type_name -> Ptt
	27, // 30: RichText.TempPtt:type_name -> TempPtt
	28, // 31: RichText.Trans211TempMessage:type_name -> Trans211TempMessage
	29, // 32: MessageBody.RichText:type_name -> RichText
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_message_messageBody_proto_init() }
func file_message_messageBody_proto_init() {
	if File_message_messageBody_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_messageBody_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlainText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Face); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotOnlineImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcSupportDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElemFlags2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonymousGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQWalletAioElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQWalletAioBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QQWalletMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightAppElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotOnlineFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ptt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempPtt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trans211TempMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageBody_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_messageBody_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_message_messageBody_proto_msgTypes[30].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_messageBody_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_messageBody_proto_goTypes,
		DependencyIndexes: file_message_messageBody_proto_depIdxs,
		MessageInfos:      file_message_messageBody_proto_msgTypes,
	}.Build()
	File_message_messageBody_proto = out.File
	file_message_messageBody_proto_rawDesc = nil
	file_message_messageBody_proto_goTypes = nil
	file_message_messageBody_proto_depIdxs = nil
}
