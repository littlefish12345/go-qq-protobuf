// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.1
// source: message/messageHead.proto

package go_qq_protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type C2CTempMessageHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2CType            *uint32 `protobuf:"varint,1,opt,name=C2CType,proto3,oneof" json:"C2CType,omitempty"`
	ServiceType        *uint32 `protobuf:"varint,2,opt,name=ServiceType,proto3,oneof" json:"ServiceType,omitempty"`
	GroupUin           *uint64 `protobuf:"varint,3,opt,name=GroupUin,proto3,oneof" json:"GroupUin,omitempty"`
	GroupCode          *uint64 `protobuf:"varint,4,opt,name=GroupCode,proto3,oneof" json:"GroupCode,omitempty"`
	Sig                []byte  `protobuf:"bytes,5,opt,name=Sig,proto3,oneof" json:"Sig,omitempty"`
	SigType            *uint32 `protobuf:"varint,6,opt,name=SigType,proto3,oneof" json:"SigType,omitempty"`
	FromPhone          *string `protobuf:"bytes,7,opt,name=FromPhone,proto3,oneof" json:"FromPhone,omitempty"`
	ToPhone            *string `protobuf:"bytes,8,opt,name=ToPhone,proto3,oneof" json:"ToPhone,omitempty"`
	LockDisplay        *uint32 `protobuf:"varint,9,opt,name=LockDisplay,proto3,oneof" json:"LockDisplay,omitempty"`
	DirectionFlag      *uint32 `protobuf:"varint,10,opt,name=DirectionFlag,proto3,oneof" json:"DirectionFlag,omitempty"`
	Reserved           []byte  `protobuf:"bytes,11,opt,name=Reserved,proto3,oneof" json:"Reserved,omitempty"`
	BusinessName       []byte  `protobuf:"bytes,14,opt,name=BusinessName,proto3,oneof" json:"BusinessName,omitempty"`
	BusinessSubContent []byte  `protobuf:"bytes,15,opt,name=BusinessSubContent,proto3,oneof" json:"BusinessSubContent,omitempty"`
}

func (x *C2CTempMessageHead) Reset() {
	*x = C2CTempMessageHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageHead_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2CTempMessageHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2CTempMessageHead) ProtoMessage() {}

func (x *C2CTempMessageHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageHead_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2CTempMessageHead.ProtoReflect.Descriptor instead.
func (*C2CTempMessageHead) Descriptor() ([]byte, []int) {
	return file_message_messageHead_proto_rawDescGZIP(), []int{0}
}

func (x *C2CTempMessageHead) GetC2CType() uint32 {
	if x != nil && x.C2CType != nil {
		return *x.C2CType
	}
	return 0
}

func (x *C2CTempMessageHead) GetServiceType() uint32 {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return 0
}

func (x *C2CTempMessageHead) GetGroupUin() uint64 {
	if x != nil && x.GroupUin != nil {
		return *x.GroupUin
	}
	return 0
}

func (x *C2CTempMessageHead) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *C2CTempMessageHead) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *C2CTempMessageHead) GetSigType() uint32 {
	if x != nil && x.SigType != nil {
		return *x.SigType
	}
	return 0
}

func (x *C2CTempMessageHead) GetFromPhone() string {
	if x != nil && x.FromPhone != nil {
		return *x.FromPhone
	}
	return ""
}

func (x *C2CTempMessageHead) GetToPhone() string {
	if x != nil && x.ToPhone != nil {
		return *x.ToPhone
	}
	return ""
}

func (x *C2CTempMessageHead) GetLockDisplay() uint32 {
	if x != nil && x.LockDisplay != nil {
		return *x.LockDisplay
	}
	return 0
}

func (x *C2CTempMessageHead) GetDirectionFlag() uint32 {
	if x != nil && x.DirectionFlag != nil {
		return *x.DirectionFlag
	}
	return 0
}

func (x *C2CTempMessageHead) GetReserved() []byte {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *C2CTempMessageHead) GetBusinessName() []byte {
	if x != nil {
		return x.BusinessName
	}
	return nil
}

func (x *C2CTempMessageHead) GetBusinessSubContent() []byte {
	if x != nil {
		return x.BusinessSubContent
	}
	return nil
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode        *uint64 `protobuf:"varint,1,opt,name=GroupCode,proto3,oneof" json:"GroupCode,omitempty"`
	GroupType        *uint32 `protobuf:"varint,2,opt,name=GroupType,proto3,oneof" json:"GroupType,omitempty"`
	GroupInfoSeqence *uint64 `protobuf:"varint,3,opt,name=GroupInfoSeqence,proto3,oneof" json:"GroupInfoSeqence,omitempty"`
	GroupCard        []byte  `protobuf:"bytes,4,opt,name=GroupCard,proto3,oneof" json:"GroupCard,omitempty"`
	GroupRank        []byte  `protobuf:"bytes,5,opt,name=GroupRank,proto3,oneof" json:"GroupRank,omitempty"`
	GroupLevel       *uint32 `protobuf:"varint,6,opt,name=GroupLevel,proto3,oneof" json:"GroupLevel,omitempty"`
	GroupCardType    *uint32 `protobuf:"varint,7,opt,name=GroupCardType,proto3,oneof" json:"GroupCardType,omitempty"`
	GroupName        []byte  `protobuf:"bytes,8,opt,name=GroupName,proto3,oneof" json:"GroupName,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageHead_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageHead_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_message_messageHead_proto_rawDescGZIP(), []int{1}
}

func (x *GroupInfo) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *GroupInfo) GetGroupType() uint32 {
	if x != nil && x.GroupType != nil {
		return *x.GroupType
	}
	return 0
}

func (x *GroupInfo) GetGroupInfoSeqence() uint64 {
	if x != nil && x.GroupInfoSeqence != nil {
		return *x.GroupInfoSeqence
	}
	return 0
}

func (x *GroupInfo) GetGroupCard() []byte {
	if x != nil {
		return x.GroupCard
	}
	return nil
}

func (x *GroupInfo) GetGroupRank() []byte {
	if x != nil {
		return x.GroupRank
	}
	return nil
}

func (x *GroupInfo) GetGroupLevel() uint32 {
	if x != nil && x.GroupLevel != nil {
		return *x.GroupLevel
	}
	return 0
}

func (x *GroupInfo) GetGroupCardType() uint32 {
	if x != nil && x.GroupCardType != nil {
		return *x.GroupCardType
	}
	return 0
}

func (x *GroupInfo) GetGroupName() []byte {
	if x != nil {
		return x.GroupName
	}
	return nil
}

type DiscussInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscussUin         *uint64 `protobuf:"varint,1,opt,name=DiscussUin,proto3,oneof" json:"DiscussUin,omitempty"`
	DiscussType        *uint32 `protobuf:"varint,2,opt,name=DiscussType,proto3,oneof" json:"DiscussType,omitempty"`
	DiscussInfoSeqence *uint64 `protobuf:"varint,3,opt,name=DiscussInfoSeqence,proto3,oneof" json:"DiscussInfoSeqence,omitempty"`
	DiscussRemark      []byte  `protobuf:"bytes,4,opt,name=DiscussRemark,proto3,oneof" json:"DiscussRemark,omitempty"`
	DiscussName        []byte  `protobuf:"bytes,5,opt,name=DiscussName,proto3,oneof" json:"DiscussName,omitempty"`
}

func (x *DiscussInfo) Reset() {
	*x = DiscussInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageHead_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscussInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscussInfo) ProtoMessage() {}

func (x *DiscussInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageHead_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscussInfo.ProtoReflect.Descriptor instead.
func (*DiscussInfo) Descriptor() ([]byte, []int) {
	return file_message_messageHead_proto_rawDescGZIP(), []int{2}
}

func (x *DiscussInfo) GetDiscussUin() uint64 {
	if x != nil && x.DiscussUin != nil {
		return *x.DiscussUin
	}
	return 0
}

func (x *DiscussInfo) GetDiscussType() uint32 {
	if x != nil && x.DiscussType != nil {
		return *x.DiscussType
	}
	return 0
}

func (x *DiscussInfo) GetDiscussInfoSeqence() uint64 {
	if x != nil && x.DiscussInfoSeqence != nil {
		return *x.DiscussInfoSeqence
	}
	return 0
}

func (x *DiscussInfo) GetDiscussRemark() []byte {
	if x != nil {
		return x.DiscussRemark
	}
	return nil
}

func (x *DiscussInfo) GetDiscussName() []byte {
	if x != nil {
		return x.DiscussName
	}
	return nil
}

type MutilTransHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *uint32 `protobuf:"varint,1,opt,name=Status,proto3,oneof" json:"Status,omitempty"`
	MessageId *uint32 `protobuf:"varint,2,opt,name=MessageId,proto3,oneof" json:"MessageId,omitempty"`
}

func (x *MutilTransHead) Reset() {
	*x = MutilTransHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageHead_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutilTransHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutilTransHead) ProtoMessage() {}

func (x *MutilTransHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageHead_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutilTransHead.ProtoReflect.Descriptor instead.
func (*MutilTransHead) Descriptor() ([]byte, []int) {
	return file_message_messageHead_proto_rawDescGZIP(), []int{3}
}

func (x *MutilTransHead) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *MutilTransHead) GetMessageId() uint32 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return 0
}

type InstInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppPid         *uint32 `protobuf:"varint,1,opt,name=AppPid,proto3,oneof" json:"AppPid,omitempty"`
	InstId         *uint32 `protobuf:"varint,2,opt,name=InstId,proto3,oneof" json:"InstId,omitempty"`
	Platform       *uint32 `protobuf:"varint,3,opt,name=Platform,proto3,oneof" json:"Platform,omitempty"`
	EnumDeviceType *uint32 `protobuf:"varint,10,opt,name=EnumDeviceType,proto3,oneof" json:"EnumDeviceType,omitempty"`
}

func (x *InstInfo) Reset() {
	*x = InstInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageHead_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstInfo) ProtoMessage() {}

func (x *InstInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageHead_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstInfo.ProtoReflect.Descriptor instead.
func (*InstInfo) Descriptor() ([]byte, []int) {
	return file_message_messageHead_proto_rawDescGZIP(), []int{4}
}

func (x *InstInfo) GetAppPid() uint32 {
	if x != nil && x.AppPid != nil {
		return *x.AppPid
	}
	return 0
}

func (x *InstInfo) GetInstId() uint32 {
	if x != nil && x.InstId != nil {
		return *x.InstId
	}
	return 0
}

func (x *InstInfo) GetPlatform() uint32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *InstInfo) GetEnumDeviceType() uint32 {
	if x != nil && x.EnumDeviceType != nil {
		return *x.EnumDeviceType
	}
	return 0
}

type InstCtrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendToInst  []*InstInfo `protobuf:"bytes,1,rep,name=SendToInst,proto3" json:"SendToInst,omitempty"`
	ExcludeInst []*InstInfo `protobuf:"bytes,2,rep,name=ExcludeInst,proto3" json:"ExcludeInst,omitempty"`
	FromInst    *InstInfo   `protobuf:"bytes,3,opt,name=FromInst,proto3,oneof" json:"FromInst,omitempty"`
}

func (x *InstCtrl) Reset() {
	*x = InstCtrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageHead_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstCtrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstCtrl) ProtoMessage() {}

func (x *InstCtrl) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageHead_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstCtrl.ProtoReflect.Descriptor instead.
func (*InstCtrl) Descriptor() ([]byte, []int) {
	return file_message_messageHead_proto_rawDescGZIP(), []int{5}
}

func (x *InstCtrl) GetSendToInst() []*InstInfo {
	if x != nil {
		return x.SendToInst
	}
	return nil
}

func (x *InstCtrl) GetExcludeInst() []*InstInfo {
	if x != nil {
		return x.ExcludeInst
	}
	return nil
}

func (x *InstCtrl) GetFromInst() *InstInfo {
	if x != nil {
		return x.FromInst
	}
	return nil
}

type ExtGroupKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentMaxSeqence *uint32 `protobuf:"varint,1,opt,name=CurrentMaxSeqence,proto3,oneof" json:"CurrentMaxSeqence,omitempty"`
	CurrentTime       *uint64 `protobuf:"varint,2,opt,name=CurrentTime,proto3,oneof" json:"CurrentTime,omitempty"`
	OperateByParents  *uint32 `protobuf:"varint,3,opt,name=OperateByParents,proto3,oneof" json:"OperateByParents,omitempty"`
	ExtGroupInfo      []byte  `protobuf:"bytes,4,opt,name=ExtGroupInfo,proto3,oneof" json:"ExtGroupInfo,omitempty"`
}

func (x *ExtGroupKeyInfo) Reset() {
	*x = ExtGroupKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageHead_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtGroupKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtGroupKeyInfo) ProtoMessage() {}

func (x *ExtGroupKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageHead_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtGroupKeyInfo.ProtoReflect.Descriptor instead.
func (*ExtGroupKeyInfo) Descriptor() ([]byte, []int) {
	return file_message_messageHead_proto_rawDescGZIP(), []int{6}
}

func (x *ExtGroupKeyInfo) GetCurrentMaxSeqence() uint32 {
	if x != nil && x.CurrentMaxSeqence != nil {
		return *x.CurrentMaxSeqence
	}
	return 0
}

func (x *ExtGroupKeyInfo) GetCurrentTime() uint64 {
	if x != nil && x.CurrentTime != nil {
		return *x.CurrentTime
	}
	return 0
}

func (x *ExtGroupKeyInfo) GetOperateByParents() uint32 {
	if x != nil && x.OperateByParents != nil {
		return *x.OperateByParents
	}
	return 0
}

func (x *ExtGroupKeyInfo) GetExtGroupInfo() []byte {
	if x != nil {
		return x.ExtGroupInfo
	}
	return nil
}

type MessageHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUin                    *int64              `protobuf:"varint,1,opt,name=FromUin,proto3,oneof" json:"FromUin,omitempty"`
	ToUin                      *int64              `protobuf:"varint,2,opt,name=ToUin,proto3,oneof" json:"ToUin,omitempty"`
	MessageType                *uint32             `protobuf:"varint,3,opt,name=MessageType,proto3,oneof" json:"MessageType,omitempty"`
	C2CCmd                     *uint32             `protobuf:"varint,4,opt,name=C2CCmd,proto3,oneof" json:"C2CCmd,omitempty"`
	MessageSeqence             *uint32             `protobuf:"varint,5,opt,name=MessageSeqence,proto3,oneof" json:"MessageSeqence,omitempty"`
	MessageTime                *uint32             `protobuf:"varint,6,opt,name=MessageTime,proto3,oneof" json:"MessageTime,omitempty"`
	MessageUid                 *uint64             `protobuf:"varint,7,opt,name=MessageUid,proto3,oneof" json:"MessageUid,omitempty"`
	C2CTempMessageHead         *C2CTempMessageHead `protobuf:"bytes,8,opt,name=C2CTempMessageHead,proto3,oneof" json:"C2CTempMessageHead,omitempty"`
	GroupInfo                  *GroupInfo          `protobuf:"bytes,9,opt,name=GroupInfo,proto3,oneof" json:"GroupInfo,omitempty"`
	FromAppId                  *uint32             `protobuf:"varint,10,opt,name=FromAppId,proto3,oneof" json:"FromAppId,omitempty"`
	FromInstId                 *uint32             `protobuf:"varint,11,opt,name=FromInstId,proto3,oneof" json:"FromInstId,omitempty"`
	UserActive                 *uint32             `protobuf:"varint,12,opt,name=UserActive,proto3,oneof" json:"UserActive,omitempty"`
	DiscussInfo                *DiscussInfo        `protobuf:"bytes,13,opt,name=DiscussInfo,proto3,oneof" json:"DiscussInfo,omitempty"`
	FromNickname               *string             `protobuf:"bytes,14,opt,name=FromNickname,proto3,oneof" json:"FromNickname,omitempty"`
	AuthUin                    *int64              `protobuf:"varint,15,opt,name=AuthUin,proto3,oneof" json:"AuthUin,omitempty"`
	AuthNickname               *string             `protobuf:"bytes,16,opt,name=AuthNickname,proto3,oneof" json:"AuthNickname,omitempty"`
	MessageFlag                *uint32             `protobuf:"varint,17,opt,name=MessageFlag,proto3,oneof" json:"MessageFlag,omitempty"`
	AuthRemark                 *string             `protobuf:"bytes,18,opt,name=AuthRemark,proto3,oneof" json:"AuthRemark,omitempty"`
	GroupName                  *string             `protobuf:"bytes,19,opt,name=GroupName,proto3,oneof" json:"GroupName,omitempty"`
	MutilTransHead             *MutilTransHead     `protobuf:"bytes,20,opt,name=MutilTransHead,proto3,oneof" json:"MutilTransHead,omitempty"`
	MessageInstCtrl            *InstCtrl           `protobuf:"bytes,21,opt,name=MessageInstCtrl,proto3,oneof" json:"MessageInstCtrl,omitempty"`
	PublicAccountGroupSendFlag *uint32             `protobuf:"varint,22,opt,name=PublicAccountGroupSendFlag,proto3,oneof" json:"PublicAccountGroupSendFlag,omitempty"`
	WseqInC2CMessageHead       *uint32             `protobuf:"varint,23,opt,name=WseqInC2CMessageHead,proto3,oneof" json:"WseqInC2CMessageHead,omitempty"`
	CpId                       *uint64             `protobuf:"varint,24,opt,name=CpId,proto3,oneof" json:"CpId,omitempty"`
	ExtGroupKeyInfo            *ExtGroupKeyInfo    `protobuf:"bytes,25,opt,name=ExtGroupKeyInfo,proto3,oneof" json:"ExtGroupKeyInfo,omitempty"`
	MultiCompatibleText        *string             `protobuf:"bytes,26,opt,name=MultiCompatibleText,proto3,oneof" json:"MultiCompatibleText,omitempty"`
	AuthSex                    *uint32             `protobuf:"varint,27,opt,name=AuthSex,proto3,oneof" json:"AuthSex,omitempty"`
	IsSourceMessage            *bool               `protobuf:"varint,28,opt,name=IsSourceMessage,proto3,oneof" json:"IsSourceMessage,omitempty"`
}

func (x *MessageHead) Reset() {
	*x = MessageHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_messageHead_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHead) ProtoMessage() {}

func (x *MessageHead) ProtoReflect() protoreflect.Message {
	mi := &file_message_messageHead_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHead.ProtoReflect.Descriptor instead.
func (*MessageHead) Descriptor() ([]byte, []int) {
	return file_message_messageHead_proto_rawDescGZIP(), []int{7}
}

func (x *MessageHead) GetFromUin() int64 {
	if x != nil && x.FromUin != nil {
		return *x.FromUin
	}
	return 0
}

func (x *MessageHead) GetToUin() int64 {
	if x != nil && x.ToUin != nil {
		return *x.ToUin
	}
	return 0
}

func (x *MessageHead) GetMessageType() uint32 {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return 0
}

func (x *MessageHead) GetC2CCmd() uint32 {
	if x != nil && x.C2CCmd != nil {
		return *x.C2CCmd
	}
	return 0
}

func (x *MessageHead) GetMessageSeqence() uint32 {
	if x != nil && x.MessageSeqence != nil {
		return *x.MessageSeqence
	}
	return 0
}

func (x *MessageHead) GetMessageTime() uint32 {
	if x != nil && x.MessageTime != nil {
		return *x.MessageTime
	}
	return 0
}

func (x *MessageHead) GetMessageUid() uint64 {
	if x != nil && x.MessageUid != nil {
		return *x.MessageUid
	}
	return 0
}

func (x *MessageHead) GetC2CTempMessageHead() *C2CTempMessageHead {
	if x != nil {
		return x.C2CTempMessageHead
	}
	return nil
}

func (x *MessageHead) GetGroupInfo() *GroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *MessageHead) GetFromAppId() uint32 {
	if x != nil && x.FromAppId != nil {
		return *x.FromAppId
	}
	return 0
}

func (x *MessageHead) GetFromInstId() uint32 {
	if x != nil && x.FromInstId != nil {
		return *x.FromInstId
	}
	return 0
}

func (x *MessageHead) GetUserActive() uint32 {
	if x != nil && x.UserActive != nil {
		return *x.UserActive
	}
	return 0
}

func (x *MessageHead) GetDiscussInfo() *DiscussInfo {
	if x != nil {
		return x.DiscussInfo
	}
	return nil
}

func (x *MessageHead) GetFromNickname() string {
	if x != nil && x.FromNickname != nil {
		return *x.FromNickname
	}
	return ""
}

func (x *MessageHead) GetAuthUin() int64 {
	if x != nil && x.AuthUin != nil {
		return *x.AuthUin
	}
	return 0
}

func (x *MessageHead) GetAuthNickname() string {
	if x != nil && x.AuthNickname != nil {
		return *x.AuthNickname
	}
	return ""
}

func (x *MessageHead) GetMessageFlag() uint32 {
	if x != nil && x.MessageFlag != nil {
		return *x.MessageFlag
	}
	return 0
}

func (x *MessageHead) GetAuthRemark() string {
	if x != nil && x.AuthRemark != nil {
		return *x.AuthRemark
	}
	return ""
}

func (x *MessageHead) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *MessageHead) GetMutilTransHead() *MutilTransHead {
	if x != nil {
		return x.MutilTransHead
	}
	return nil
}

func (x *MessageHead) GetMessageInstCtrl() *InstCtrl {
	if x != nil {
		return x.MessageInstCtrl
	}
	return nil
}

func (x *MessageHead) GetPublicAccountGroupSendFlag() uint32 {
	if x != nil && x.PublicAccountGroupSendFlag != nil {
		return *x.PublicAccountGroupSendFlag
	}
	return 0
}

func (x *MessageHead) GetWseqInC2CMessageHead() uint32 {
	if x != nil && x.WseqInC2CMessageHead != nil {
		return *x.WseqInC2CMessageHead
	}
	return 0
}

func (x *MessageHead) GetCpId() uint64 {
	if x != nil && x.CpId != nil {
		return *x.CpId
	}
	return 0
}

func (x *MessageHead) GetExtGroupKeyInfo() *ExtGroupKeyInfo {
	if x != nil {
		return x.ExtGroupKeyInfo
	}
	return nil
}

func (x *MessageHead) GetMultiCompatibleText() string {
	if x != nil && x.MultiCompatibleText != nil {
		return *x.MultiCompatibleText
	}
	return ""
}

func (x *MessageHead) GetAuthSex() uint32 {
	if x != nil && x.AuthSex != nil {
		return *x.AuthSex
	}
	return 0
}

func (x *MessageHead) GetIsSourceMessage() bool {
	if x != nil && x.IsSourceMessage != nil {
		return *x.IsSourceMessage
	}
	return false
}

var File_message_messageHead_proto protoreflect.FileDescriptor

var file_message_messageHead_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x05, 0x0a, 0x12,
	0x43, 0x32, 0x43, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x43, 0x32, 0x43, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x43, 0x32, 0x43, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x08, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x53, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x03, 0x53, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x07, 0x53, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0b, 0x4c, 0x6f, 0x63,
	0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0a, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0b, 0x52,
	0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x12, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x75, 0x62, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0c, 0x52, 0x12,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x32, 0x43, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x6e, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x53, 0x69, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4c,
	0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xb7, 0x03, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x02, 0x52, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x65,
	0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x05, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x07, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x0b,
	0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0a, 0x44,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x12, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x0b,
	0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x55, 0x69, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x69, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0xc8, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x06, 0x41, 0x70, 0x70, 0x50, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x06, 0x41, 0x70, 0x70, 0x50, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x49,
	0x6e, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x49,
	0x6e, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x45, 0x6e, 0x75,
	0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x70, 0x70, 0x50, 0x69,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x45, 0x6e,
	0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x08, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x0a, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x49, 0x6e, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x0f, 0x45,
	0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31,
	0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x11, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x79, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x03, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x78, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x45, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa7,
	0x0d, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05,
	0x54, 0x6f, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x43, 0x32, 0x43, 0x43, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x03, 0x52, 0x06, 0x43, 0x32, 0x43, 0x43, 0x6d, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05,
	0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x43, 0x32, 0x43, 0x54, 0x65, 0x6d, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x32, 0x43, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x48, 0x07, 0x52, 0x12, 0x43, 0x32, 0x43, 0x54, 0x65, 0x6d,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x08,
	0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x09, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x44,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x0c,
	0x52, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41, 0x75, 0x74,
	0x68, 0x55, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x07, 0x41, 0x75,
	0x74, 0x68, 0x55, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x12, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x74, 0x69, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x48, 0x13, 0x52, 0x0e, 0x4d, 0x75, 0x74,
	0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x74, 0x72,
	0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x74,
	0x72, 0x6c, 0x48, 0x14, 0x52, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x43, 0x74, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65,
	0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x15, 0x52, 0x1a,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x14, 0x57, 0x73, 0x65, 0x71, 0x49, 0x6e, 0x43, 0x32, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x16, 0x52, 0x14, 0x57,
	0x73, 0x65, 0x71, 0x49, 0x6e, 0x43, 0x32, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x43, 0x70, 0x49, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x17, 0x52, 0x04, 0x43, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x45, 0x78, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x18, 0x52, 0x0f, 0x45, 0x78,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52,
	0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1a, 0x52, 0x07, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x49, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x1b, 0x52, 0x0f, 0x49, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x69,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x43, 0x32, 0x43, 0x43, 0x6d, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x71, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x43, 0x32, 0x43,
	0x54, 0x65, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x72,
	0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41,
	0x75, 0x74, 0x68, 0x55, 0x69, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x75, 0x74, 0x69, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x48, 0x65, 0x61, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x57,
	0x73, 0x65, 0x71, 0x49, 0x6e, 0x43, 0x32, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x43, 0x70, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x45, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x65, 0x78, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x49, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x73,
	0x68, 0x31, 0x32, 0x33, 0x34, 0x35, 0x2f, 0x67, 0x6f, 0x2d, 0x71, 0x71, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_messageHead_proto_rawDescOnce sync.Once
	file_message_messageHead_proto_rawDescData = file_message_messageHead_proto_rawDesc
)

func file_message_messageHead_proto_rawDescGZIP() []byte {
	file_message_messageHead_proto_rawDescOnce.Do(func() {
		file_message_messageHead_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_messageHead_proto_rawDescData)
	})
	return file_message_messageHead_proto_rawDescData
}

var file_message_messageHead_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_message_messageHead_proto_goTypes = []interface{}{
	(*C2CTempMessageHead)(nil), // 0: C2CTempMessageHead
	(*GroupInfo)(nil),          // 1: GroupInfo
	(*DiscussInfo)(nil),        // 2: DiscussInfo
	(*MutilTransHead)(nil),     // 3: MutilTransHead
	(*InstInfo)(nil),           // 4: InstInfo
	(*InstCtrl)(nil),           // 5: InstCtrl
	(*ExtGroupKeyInfo)(nil),    // 6: ExtGroupKeyInfo
	(*MessageHead)(nil),        // 7: MessageHead
}
var file_message_messageHead_proto_depIdxs = []int32{
	4, // 0: InstCtrl.SendToInst:type_name -> InstInfo
	4, // 1: InstCtrl.ExcludeInst:type_name -> InstInfo
	4, // 2: InstCtrl.FromInst:type_name -> InstInfo
	0, // 3: MessageHead.C2CTempMessageHead:type_name -> C2CTempMessageHead
	1, // 4: MessageHead.GroupInfo:type_name -> GroupInfo
	2, // 5: MessageHead.DiscussInfo:type_name -> DiscussInfo
	3, // 6: MessageHead.MutilTransHead:type_name -> MutilTransHead
	5, // 7: MessageHead.MessageInstCtrl:type_name -> InstCtrl
	6, // 8: MessageHead.ExtGroupKeyInfo:type_name -> ExtGroupKeyInfo
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_message_messageHead_proto_init() }
func file_message_messageHead_proto_init() {
	if File_message_messageHead_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_messageHead_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2CTempMessageHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageHead_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageHead_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscussInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageHead_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutilTransHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageHead_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageHead_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstCtrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageHead_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtGroupKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_messageHead_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_messageHead_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_message_messageHead_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_message_messageHead_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_message_messageHead_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_message_messageHead_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_message_messageHead_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_message_messageHead_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_message_messageHead_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_messageHead_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_messageHead_proto_goTypes,
		DependencyIndexes: file_message_messageHead_proto_depIdxs,
		MessageInfos:      file_message_messageHead_proto_msgTypes,
	}.Build()
	File_message_messageHead_proto = out.File
	file_message_messageHead_proto_rawDesc = nil
	file_message_messageHead_proto_goTypes = nil
	file_message_messageHead_proto_depIdxs = nil
}
