// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobufStruct.proto

package go_qq_protobuf

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceInfoBytesStruct struct {
	Bootloader   string `protobuf:"bytes,1,opt,name=Bootloader,proto3" json:"Bootloader,omitempty"`
	ProcVersion  string `protobuf:"bytes,2,opt,name=ProcVersion,proto3" json:"ProcVersion,omitempty"`
	CodeName     string `protobuf:"bytes,3,opt,name=CodeName,proto3" json:"CodeName,omitempty"`
	Incremental  string `protobuf:"bytes,4,opt,name=Incremental,proto3" json:"Incremental,omitempty"`
	FingerPrint  string `protobuf:"bytes,5,opt,name=FingerPrint,proto3" json:"FingerPrint,omitempty"`
	BootId       string `protobuf:"bytes,6,opt,name=BootId,proto3" json:"BootId,omitempty"`
	AndroidId    string `protobuf:"bytes,7,opt,name=AndroidId,proto3" json:"AndroidId,omitempty"`
	BaseBand     string `protobuf:"bytes,8,opt,name=BaseBand,proto3" json:"BaseBand,omitempty"`
	InnerVersion string `protobuf:"bytes,9,opt,name=InnerVersion,proto3" json:"InnerVersion,omitempty"`
}

func (m *DeviceInfoBytesStruct) Reset()         { *m = DeviceInfoBytesStruct{} }
func (m *DeviceInfoBytesStruct) String() string { return proto.CompactTextString(m) }
func (*DeviceInfoBytesStruct) ProtoMessage()    {}
func (*DeviceInfoBytesStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_434ddb4d57c89a2a, []int{0}
}
func (m *DeviceInfoBytesStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceInfoBytesStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceInfoBytesStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceInfoBytesStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfoBytesStruct.Merge(m, src)
}
func (m *DeviceInfoBytesStruct) XXX_Size() int {
	return m.Size()
}
func (m *DeviceInfoBytesStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfoBytesStruct.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfoBytesStruct proto.InternalMessageInfo

func (m *DeviceInfoBytesStruct) GetBootloader() string {
	if m != nil {
		return m.Bootloader
	}
	return ""
}

func (m *DeviceInfoBytesStruct) GetProcVersion() string {
	if m != nil {
		return m.ProcVersion
	}
	return ""
}

func (m *DeviceInfoBytesStruct) GetCodeName() string {
	if m != nil {
		return m.CodeName
	}
	return ""
}

func (m *DeviceInfoBytesStruct) GetIncremental() string {
	if m != nil {
		return m.Incremental
	}
	return ""
}

func (m *DeviceInfoBytesStruct) GetFingerPrint() string {
	if m != nil {
		return m.FingerPrint
	}
	return ""
}

func (m *DeviceInfoBytesStruct) GetBootId() string {
	if m != nil {
		return m.BootId
	}
	return ""
}

func (m *DeviceInfoBytesStruct) GetAndroidId() string {
	if m != nil {
		return m.AndroidId
	}
	return ""
}

func (m *DeviceInfoBytesStruct) GetBaseBand() string {
	if m != nil {
		return m.BaseBand
	}
	return ""
}

func (m *DeviceInfoBytesStruct) GetInnerVersion() string {
	if m != nil {
		return m.InnerVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceInfoBytesStruct)(nil), "DeviceInfoBytesStruct")
}

func init() { proto.RegisterFile("protobufStruct.proto", fileDescriptor_434ddb4d57c89a2a) }

var fileDescriptor_434ddb4d57c89a2a = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x9b, 0xaa, 0xb5, 0x19, 0x5d, 0x0d, 0x2a, 0x83, 0xc8, 0x50, 0xba, 0xd2, 0x45, 0x5b,
	0xb4, 0x7a, 0x00, 0x53, 0x11, 0xb2, 0x91, 0xa2, 0xe0, 0xc2, 0x5d, 0x92, 0x79, 0x49, 0x07, 0x92,
	0x79, 0x76, 0x32, 0x11, 0xbc, 0x85, 0x37, 0xf1, 0x1a, 0x2e, 0xbb, 0x74, 0x29, 0xc9, 0x45, 0x24,
	0x13, 0xa3, 0x71, 0x97, 0xff, 0xfb, 0xfe, 0x07, 0x7f, 0x18, 0x72, 0xf0, 0xac, 0xd1, 0x60, 0x58,
	0xc4, 0x0f, 0x46, 0x17, 0x91, 0x99, 0xda, 0x38, 0x7e, 0xef, 0x93, 0xc3, 0x1b, 0x78, 0x91, 0x11,
	0xf8, 0x2a, 0x46, 0xef, 0xd5, 0x40, 0xde, 0x78, 0xca, 0x09, 0xf1, 0x10, 0x4d, 0x8a, 0x81, 0x00,
	0xcd, 0x9c, 0x91, 0x73, 0xea, 0xde, 0x77, 0x08, 0x1d, 0x91, 0xbd, 0xa5, 0xc6, 0xe8, 0x11, 0x74,
	0x2e, 0x51, 0xb1, 0xbe, 0x2d, 0x74, 0x11, 0x3d, 0x26, 0xc3, 0x05, 0x0a, 0xb8, 0x0b, 0x32, 0x60,
	0x5b, 0x56, 0xff, 0xe6, 0xfa, 0xda, 0x57, 0x91, 0x86, 0x0c, 0x94, 0x09, 0x52, 0xb6, 0xdd, 0x5c,
	0x77, 0x50, 0xdd, 0xb8, 0x95, 0x2a, 0x01, 0xbd, 0xd4, 0x52, 0x19, 0xb6, 0xd3, 0x34, 0x3a, 0x88,
	0x1e, 0x91, 0x41, 0xbd, 0xc7, 0x17, 0x6c, 0x60, 0xe5, 0x4f, 0xa2, 0x27, 0xc4, 0xbd, 0x56, 0x42,
	0xa3, 0x14, 0xbe, 0x60, 0xbb, 0x56, 0xfd, 0x81, 0x7a, 0x95, 0x17, 0xe4, 0xe0, 0x05, 0x4a, 0xb0,
	0x61, 0xb3, 0xaa, 0xcd, 0x74, 0x4c, 0xf6, 0x7d, 0xa5, 0x40, 0xb7, 0x3f, 0xe5, 0x5a, 0xff, 0x8f,
	0x79, 0x8b, 0x8f, 0x92, 0x3b, 0x9b, 0x92, 0x3b, 0x5f, 0x25, 0x77, 0xde, 0x2a, 0xde, 0xdb, 0x54,
	0xbc, 0xf7, 0x59, 0xf1, 0xde, 0xd3, 0x59, 0x22, 0xcd, 0xaa, 0x08, 0xa7, 0x11, 0x66, 0xb3, 0x54,
	0x1a, 0x93, 0x42, 0x2c, 0xf3, 0xd5, 0xf9, 0xc5, 0xfc, 0xf2, 0x6a, 0x96, 0xe0, 0x64, 0xbd, 0x9e,
	0xb4, 0x4f, 0x10, 0x0e, 0xec, 0xd7, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x78, 0x0d, 0x7e,
	0x95, 0x01, 0x00, 0x00,
}

func (m *DeviceInfoBytesStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceInfoBytesStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceInfoBytesStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InnerVersion) > 0 {
		i -= len(m.InnerVersion)
		copy(dAtA[i:], m.InnerVersion)
		i = encodeVarintProtobufStruct(dAtA, i, uint64(len(m.InnerVersion)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BaseBand) > 0 {
		i -= len(m.BaseBand)
		copy(dAtA[i:], m.BaseBand)
		i = encodeVarintProtobufStruct(dAtA, i, uint64(len(m.BaseBand)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AndroidId) > 0 {
		i -= len(m.AndroidId)
		copy(dAtA[i:], m.AndroidId)
		i = encodeVarintProtobufStruct(dAtA, i, uint64(len(m.AndroidId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BootId) > 0 {
		i -= len(m.BootId)
		copy(dAtA[i:], m.BootId)
		i = encodeVarintProtobufStruct(dAtA, i, uint64(len(m.BootId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FingerPrint) > 0 {
		i -= len(m.FingerPrint)
		copy(dAtA[i:], m.FingerPrint)
		i = encodeVarintProtobufStruct(dAtA, i, uint64(len(m.FingerPrint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Incremental) > 0 {
		i -= len(m.Incremental)
		copy(dAtA[i:], m.Incremental)
		i = encodeVarintProtobufStruct(dAtA, i, uint64(len(m.Incremental)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CodeName) > 0 {
		i -= len(m.CodeName)
		copy(dAtA[i:], m.CodeName)
		i = encodeVarintProtobufStruct(dAtA, i, uint64(len(m.CodeName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProcVersion) > 0 {
		i -= len(m.ProcVersion)
		copy(dAtA[i:], m.ProcVersion)
		i = encodeVarintProtobufStruct(dAtA, i, uint64(len(m.ProcVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bootloader) > 0 {
		i -= len(m.Bootloader)
		copy(dAtA[i:], m.Bootloader)
		i = encodeVarintProtobufStruct(dAtA, i, uint64(len(m.Bootloader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtobufStruct(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtobufStruct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceInfoBytesStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bootloader)
	if l > 0 {
		n += 1 + l + sovProtobufStruct(uint64(l))
	}
	l = len(m.ProcVersion)
	if l > 0 {
		n += 1 + l + sovProtobufStruct(uint64(l))
	}
	l = len(m.CodeName)
	if l > 0 {
		n += 1 + l + sovProtobufStruct(uint64(l))
	}
	l = len(m.Incremental)
	if l > 0 {
		n += 1 + l + sovProtobufStruct(uint64(l))
	}
	l = len(m.FingerPrint)
	if l > 0 {
		n += 1 + l + sovProtobufStruct(uint64(l))
	}
	l = len(m.BootId)
	if l > 0 {
		n += 1 + l + sovProtobufStruct(uint64(l))
	}
	l = len(m.AndroidId)
	if l > 0 {
		n += 1 + l + sovProtobufStruct(uint64(l))
	}
	l = len(m.BaseBand)
	if l > 0 {
		n += 1 + l + sovProtobufStruct(uint64(l))
	}
	l = len(m.InnerVersion)
	if l > 0 {
		n += 1 + l + sovProtobufStruct(uint64(l))
	}
	return n
}

func sovProtobufStruct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtobufStruct(x uint64) (n int) {
	return sovProtobufStruct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceInfoBytesStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtobufStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceInfoBytesStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceInfoBytesStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootloader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bootloader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incremental", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Incremental = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerPrint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FingerPrint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseBand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseBand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InnerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtobufStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtobufStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtobufStruct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtobufStruct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtobufStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtobufStruct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtobufStruct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtobufStruct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtobufStruct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtobufStruct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtobufStruct = fmt.Errorf("proto: unexpected end of group")
)
